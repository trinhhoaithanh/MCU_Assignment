
MCU_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004b44  08004b44  00014b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bc4  08004bc4  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  08004bc4  08004bc4  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bc4  08004bc4  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bc4  08004bc4  00014bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bc8  08004bc8  00014bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08004bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  200000e0  08004cac  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08004cac  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115e8  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a66  00000000  00000000  000316f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00034158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00034fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018afb  00000000  00000000  00035ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bbf  00000000  00000000  0004e7db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b9d1  00000000  00000000  0005f39a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ead6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d78  00000000  00000000  000eadc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b2c 	.word	0x08004b2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	08004b2c 	.word	0x08004b2c

0800014c <isButtonPressed>:
int KeyReg3[MAX_BUTTON] = {NORMAL_STATE};

int TimeOutForKeyPress[MAX_BUTTON] = {200};
int button_flag[MAX_BUTTON] = {0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000fc 	.word	0x200000fc

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]

	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200000fc 	.word	0x200000fc

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for(int i=0; i<MAX_BUTTON; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e07b      	b.n	80002a4 <getKeyInput+0x104>
	  KeyReg0[i] = KeyReg1[i];
 80001ac:	4a41      	ldr	r2, [pc, #260]	; (80002b4 <getKeyInput+0x114>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4940      	ldr	r1, [pc, #256]	; (80002b8 <getKeyInput+0x118>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  KeyReg1[i] = KeyReg2[i];
 80001bc:	4a3f      	ldr	r2, [pc, #252]	; (80002bc <getKeyInput+0x11c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	493b      	ldr	r1, [pc, #236]	; (80002b4 <getKeyInput+0x114>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  //Add your button here
	  KeyReg2[0] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001cc:	2102      	movs	r1, #2
 80001ce:	483c      	ldr	r0, [pc, #240]	; (80002c0 <getKeyInput+0x120>)
 80001d0:	f001 fe34 	bl	8001e3c <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b38      	ldr	r3, [pc, #224]	; (80002bc <getKeyInput+0x11c>)
 80001da:	601a      	str	r2, [r3, #0]
	  KeyReg2[1] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80001dc:	2110      	movs	r1, #16
 80001de:	4838      	ldr	r0, [pc, #224]	; (80002c0 <getKeyInput+0x120>)
 80001e0:	f001 fe2c 	bl	8001e3c <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	461a      	mov	r2, r3
 80001e8:	4b34      	ldr	r3, [pc, #208]	; (80002bc <getKeyInput+0x11c>)
 80001ea:	605a      	str	r2, [r3, #4]
	  KeyReg2[2] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80001ec:	2101      	movs	r1, #1
 80001ee:	4835      	ldr	r0, [pc, #212]	; (80002c4 <getKeyInput+0x124>)
 80001f0:	f001 fe24 	bl	8001e3c <HAL_GPIO_ReadPin>
 80001f4:	4603      	mov	r3, r0
 80001f6:	461a      	mov	r2, r3
 80001f8:	4b30      	ldr	r3, [pc, #192]	; (80002bc <getKeyInput+0x11c>)
 80001fa:	609a      	str	r2, [r3, #8]
	  KeyReg2[3] = HAL_GPIO_ReadPin(Pedestrian_Button_GPIO_Port, Pedestrian_Button_Pin);
 80001fc:	2101      	movs	r1, #1
 80001fe:	4830      	ldr	r0, [pc, #192]	; (80002c0 <getKeyInput+0x120>)
 8000200:	f001 fe1c 	bl	8001e3c <HAL_GPIO_ReadPin>
 8000204:	4603      	mov	r3, r0
 8000206:	461a      	mov	r2, r3
 8000208:	4b2c      	ldr	r3, [pc, #176]	; (80002bc <getKeyInput+0x11c>)
 800020a:	60da      	str	r2, [r3, #12]

	  if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 800020c:	4a2a      	ldr	r2, [pc, #168]	; (80002b8 <getKeyInput+0x118>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000214:	4927      	ldr	r1, [pc, #156]	; (80002b4 <getKeyInput+0x114>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800021c:	429a      	cmp	r2, r3
 800021e:	d13e      	bne.n	800029e <getKeyInput+0xfe>
 8000220:	4a24      	ldr	r2, [pc, #144]	; (80002b4 <getKeyInput+0x114>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000228:	4924      	ldr	r1, [pc, #144]	; (80002bc <getKeyInput+0x11c>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000230:	429a      	cmp	r2, r3
 8000232:	d134      	bne.n	800029e <getKeyInput+0xfe>
		if (KeyReg3[i] != KeyReg2[i]){
 8000234:	4a24      	ldr	r2, [pc, #144]	; (80002c8 <getKeyInput+0x128>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023c:	491f      	ldr	r1, [pc, #124]	; (80002bc <getKeyInput+0x11c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000244:	429a      	cmp	r2, r3
 8000246:	d016      	beq.n	8000276 <getKeyInput+0xd6>
		  KeyReg3[i] = KeyReg2[i];
 8000248:	4a1c      	ldr	r2, [pc, #112]	; (80002bc <getKeyInput+0x11c>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000250:	491d      	ldr	r1, [pc, #116]	; (80002c8 <getKeyInput+0x128>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  if (KeyReg2[i] == PRESSED_STATE){
 8000258:	4a18      	ldr	r2, [pc, #96]	; (80002bc <getKeyInput+0x11c>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d11c      	bne.n	800029e <getKeyInput+0xfe>
			TimeOutForKeyPress[i] = 200;
 8000264:	4a19      	ldr	r2, [pc, #100]	; (80002cc <getKeyInput+0x12c>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	21c8      	movs	r1, #200	; 0xc8
 800026a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			subKeyProcess(i);
 800026e:	6878      	ldr	r0, [r7, #4]
 8000270:	f7ff ff86 	bl	8000180 <subKeyProcess>
 8000274:	e013      	b.n	800029e <getKeyInput+0xfe>
		  }
		}else{
		   TimeOutForKeyPress[i]--;
 8000276:	4a15      	ldr	r2, [pc, #84]	; (80002cc <getKeyInput+0x12c>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027e:	1e5a      	subs	r2, r3, #1
 8000280:	4912      	ldr	r1, [pc, #72]	; (80002cc <getKeyInput+0x12c>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimeOutForKeyPress[i] == 0){
 8000288:	4a10      	ldr	r2, [pc, #64]	; (80002cc <getKeyInput+0x12c>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d104      	bne.n	800029e <getKeyInput+0xfe>
				KeyReg3[i] = NORMAL_STATE;
 8000294:	4a0c      	ldr	r2, [pc, #48]	; (80002c8 <getKeyInput+0x128>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2101      	movs	r1, #1
 800029a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i<MAX_BUTTON; i++){
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	3301      	adds	r3, #1
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2b03      	cmp	r3, #3
 80002a8:	dd80      	ble.n	80001ac <getKeyInput+0xc>
			}
		}
	  }
	}
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	20000010 	.word	0x20000010
 80002b8:	20000000 	.word	0x20000000
 80002bc:	20000020 	.word	0x20000020
 80002c0:	40010800 	.word	0x40010800
 80002c4:	40010c00 	.word	0x40010c00
 80002c8:	20000030 	.word	0x20000030
 80002cc:	20000040 	.word	0x20000040

080002d0 <updateLightTime>:

#include "fsm_automatic.h"

void updateLightTime(){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	if(timer_flag[0] == 1){
 80002d4:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <updateLightTime+0x40>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d116      	bne.n	800030a <updateLightTime+0x3a>
		setTimer(1000, 0);
 80002dc:	2100      	movs	r1, #0
 80002de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e2:	f001 f811 	bl	8001308 <setTimer>
		if(sec1 > 0) sec1--;
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <updateLightTime+0x44>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	dd04      	ble.n	80002f8 <updateLightTime+0x28>
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <updateLightTime+0x44>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	3b01      	subs	r3, #1
 80002f4:	4a07      	ldr	r2, [pc, #28]	; (8000314 <updateLightTime+0x44>)
 80002f6:	6013      	str	r3, [r2, #0]
		if(sec2 > 0) sec2--;
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <updateLightTime+0x48>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	dd04      	ble.n	800030a <updateLightTime+0x3a>
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <updateLightTime+0x48>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	3b01      	subs	r3, #1
 8000306:	4a04      	ldr	r2, [pc, #16]	; (8000318 <updateLightTime+0x48>)
 8000308:	6013      	str	r3, [r2, #0]
	}
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	20000164 	.word	0x20000164
 8000314:	2000011c 	.word	0x2000011c
 8000318:	20000120 	.word	0x20000120

0800031c <ifButton1Pressed>:

void ifButton1Pressed(){
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	if(isButtonPressed(0) == 1){
 8000320:	2000      	movs	r0, #0
 8000322:	f7ff ff13 	bl	800014c <isButtonPressed>
 8000326:	4603      	mov	r3, r0
 8000328:	2b01      	cmp	r3, #1
 800032a:	d108      	bne.n	800033e <ifButton1Pressed+0x22>
		status = MAN_RED;
 800032c:	4b05      	ldr	r3, [pc, #20]	; (8000344 <ifButton1Pressed+0x28>)
 800032e:	220c      	movs	r2, #12
 8000330:	601a      	str	r2, [r3, #0]
		setTimer(250, 2);
 8000332:	2102      	movs	r1, #2
 8000334:	20fa      	movs	r0, #250	; 0xfa
 8000336:	f000 ffe7 	bl	8001308 <setTimer>
		clearAllLED();
 800033a:	f000 fb05 	bl	8000948 <clearAllLED>
	}
}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000118 	.word	0x20000118

08000348 <fsm_automatic_run>:

void fsm_automatic_run(){
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	switch(status){
 800034c:	4b57      	ldr	r3, [pc, #348]	; (80004ac <fsm_automatic_run+0x164>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	3b01      	subs	r3, #1
 8000352:	2b04      	cmp	r3, #4
 8000354:	f200 80a6 	bhi.w	80004a4 <fsm_automatic_run+0x15c>
 8000358:	a201      	add	r2, pc, #4	; (adr r2, 8000360 <fsm_automatic_run+0x18>)
 800035a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800035e:	bf00      	nop
 8000360:	08000375 	.word	0x08000375
 8000364:	080003a7 	.word	0x080003a7
 8000368:	080003e3 	.word	0x080003e3
 800036c:	08000427 	.word	0x08000427
 8000370:	08000463 	.word	0x08000463
	case INIT:
		status = RED1_GREEN2;
 8000374:	4b4d      	ldr	r3, [pc, #308]	; (80004ac <fsm_automatic_run+0x164>)
 8000376:	2202      	movs	r2, #2
 8000378:	601a      	str	r2, [r3, #0]
		setTimer(1000, 0);
 800037a:	2100      	movs	r1, #0
 800037c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000380:	f000 ffc2 	bl	8001308 <setTimer>

		sec1 = red;
 8000384:	4b4a      	ldr	r3, [pc, #296]	; (80004b0 <fsm_automatic_run+0x168>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a4a      	ldr	r2, [pc, #296]	; (80004b4 <fsm_automatic_run+0x16c>)
 800038a:	6013      	str	r3, [r2, #0]
		sec2 = green;
 800038c:	4b4a      	ldr	r3, [pc, #296]	; (80004b8 <fsm_automatic_run+0x170>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a4a      	ldr	r2, [pc, #296]	; (80004bc <fsm_automatic_run+0x174>)
 8000392:	6013      	str	r3, [r2, #0]

		updateClockBuffer(sec1, sec2);
 8000394:	4b47      	ldr	r3, [pc, #284]	; (80004b4 <fsm_automatic_run+0x16c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a48      	ldr	r2, [pc, #288]	; (80004bc <fsm_automatic_run+0x174>)
 800039a:	6812      	ldr	r2, [r2, #0]
 800039c:	4611      	mov	r1, r2
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 fa96 	bl	80008d0 <updateClockBuffer>
		break;
 80003a4:	e07f      	b.n	80004a6 <fsm_automatic_run+0x15e>
	case RED1_GREEN2:
		turnonTrafficLight1(RED);
 80003a6:	2001      	movs	r0, #1
 80003a8:	f000 faf8 	bl	800099c <turnonTrafficLight1>
		turnonTrafficLight2(GREEN);
 80003ac:	2002      	movs	r0, #2
 80003ae:	f000 fb43 	bl	8000a38 <turnonTrafficLight2>

		updateClockBuffer(sec1, sec2);
 80003b2:	4b40      	ldr	r3, [pc, #256]	; (80004b4 <fsm_automatic_run+0x16c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a41      	ldr	r2, [pc, #260]	; (80004bc <fsm_automatic_run+0x174>)
 80003b8:	6812      	ldr	r2, [r2, #0]
 80003ba:	4611      	mov	r1, r2
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 fa87 	bl	80008d0 <updateClockBuffer>
		updateLightTime();
 80003c2:	f7ff ff85 	bl	80002d0 <updateLightTime>

		if(sec2 <= 0){
 80003c6:	4b3d      	ldr	r3, [pc, #244]	; (80004bc <fsm_automatic_run+0x174>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	dc06      	bgt.n	80003dc <fsm_automatic_run+0x94>
			status = RED1_YELLOW2;
 80003ce:	4b37      	ldr	r3, [pc, #220]	; (80004ac <fsm_automatic_run+0x164>)
 80003d0:	2203      	movs	r2, #3
 80003d2:	601a      	str	r2, [r3, #0]
			sec2 = yellow;
 80003d4:	4b3a      	ldr	r3, [pc, #232]	; (80004c0 <fsm_automatic_run+0x178>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a38      	ldr	r2, [pc, #224]	; (80004bc <fsm_automatic_run+0x174>)
 80003da:	6013      	str	r3, [r2, #0]
		}

		ifButton1Pressed();
 80003dc:	f7ff ff9e 	bl	800031c <ifButton1Pressed>
		break;
 80003e0:	e061      	b.n	80004a6 <fsm_automatic_run+0x15e>
	case RED1_YELLOW2:
		turnonTrafficLight1(RED);
 80003e2:	2001      	movs	r0, #1
 80003e4:	f000 fada 	bl	800099c <turnonTrafficLight1>
		turnonTrafficLight2(YELLOW);
 80003e8:	2003      	movs	r0, #3
 80003ea:	f000 fb25 	bl	8000a38 <turnonTrafficLight2>

		updateClockBuffer(sec1, sec2);
 80003ee:	4b31      	ldr	r3, [pc, #196]	; (80004b4 <fsm_automatic_run+0x16c>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a32      	ldr	r2, [pc, #200]	; (80004bc <fsm_automatic_run+0x174>)
 80003f4:	6812      	ldr	r2, [r2, #0]
 80003f6:	4611      	mov	r1, r2
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 fa69 	bl	80008d0 <updateClockBuffer>
		updateLightTime();
 80003fe:	f7ff ff67 	bl	80002d0 <updateLightTime>

		if(sec2 <= 0){
 8000402:	4b2e      	ldr	r3, [pc, #184]	; (80004bc <fsm_automatic_run+0x174>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b00      	cmp	r3, #0
 8000408:	dc0a      	bgt.n	8000420 <fsm_automatic_run+0xd8>
			status = GREEN1_RED2;
 800040a:	4b28      	ldr	r3, [pc, #160]	; (80004ac <fsm_automatic_run+0x164>)
 800040c:	2204      	movs	r2, #4
 800040e:	601a      	str	r2, [r3, #0]
			sec1 = green;
 8000410:	4b29      	ldr	r3, [pc, #164]	; (80004b8 <fsm_automatic_run+0x170>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a27      	ldr	r2, [pc, #156]	; (80004b4 <fsm_automatic_run+0x16c>)
 8000416:	6013      	str	r3, [r2, #0]
			sec2 = red;
 8000418:	4b25      	ldr	r3, [pc, #148]	; (80004b0 <fsm_automatic_run+0x168>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a27      	ldr	r2, [pc, #156]	; (80004bc <fsm_automatic_run+0x174>)
 800041e:	6013      	str	r3, [r2, #0]
		}

		ifButton1Pressed();
 8000420:	f7ff ff7c 	bl	800031c <ifButton1Pressed>
		break;
 8000424:	e03f      	b.n	80004a6 <fsm_automatic_run+0x15e>
	case GREEN1_RED2:
		turnonTrafficLight1(GREEN);
 8000426:	2002      	movs	r0, #2
 8000428:	f000 fab8 	bl	800099c <turnonTrafficLight1>
		turnonTrafficLight2(RED);
 800042c:	2001      	movs	r0, #1
 800042e:	f000 fb03 	bl	8000a38 <turnonTrafficLight2>

		updateClockBuffer(sec1, sec2);
 8000432:	4b20      	ldr	r3, [pc, #128]	; (80004b4 <fsm_automatic_run+0x16c>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a21      	ldr	r2, [pc, #132]	; (80004bc <fsm_automatic_run+0x174>)
 8000438:	6812      	ldr	r2, [r2, #0]
 800043a:	4611      	mov	r1, r2
 800043c:	4618      	mov	r0, r3
 800043e:	f000 fa47 	bl	80008d0 <updateClockBuffer>
		updateLightTime();
 8000442:	f7ff ff45 	bl	80002d0 <updateLightTime>

		if(sec1 <= 0){
 8000446:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <fsm_automatic_run+0x16c>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	2b00      	cmp	r3, #0
 800044c:	dc06      	bgt.n	800045c <fsm_automatic_run+0x114>
			status = YELLOW1_RED2;
 800044e:	4b17      	ldr	r3, [pc, #92]	; (80004ac <fsm_automatic_run+0x164>)
 8000450:	2205      	movs	r2, #5
 8000452:	601a      	str	r2, [r3, #0]
			sec1 = yellow;
 8000454:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <fsm_automatic_run+0x178>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a16      	ldr	r2, [pc, #88]	; (80004b4 <fsm_automatic_run+0x16c>)
 800045a:	6013      	str	r3, [r2, #0]
		}

		ifButton1Pressed();
 800045c:	f7ff ff5e 	bl	800031c <ifButton1Pressed>
		break;
 8000460:	e021      	b.n	80004a6 <fsm_automatic_run+0x15e>
	case YELLOW1_RED2:
		turnonTrafficLight1(YELLOW);
 8000462:	2003      	movs	r0, #3
 8000464:	f000 fa9a 	bl	800099c <turnonTrafficLight1>
		turnonTrafficLight2(RED);
 8000468:	2001      	movs	r0, #1
 800046a:	f000 fae5 	bl	8000a38 <turnonTrafficLight2>

		updateClockBuffer(sec1, sec2);
 800046e:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <fsm_automatic_run+0x16c>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a12      	ldr	r2, [pc, #72]	; (80004bc <fsm_automatic_run+0x174>)
 8000474:	6812      	ldr	r2, [r2, #0]
 8000476:	4611      	mov	r1, r2
 8000478:	4618      	mov	r0, r3
 800047a:	f000 fa29 	bl	80008d0 <updateClockBuffer>
		updateLightTime();
 800047e:	f7ff ff27 	bl	80002d0 <updateLightTime>

		if(sec1 <= 0){
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <fsm_automatic_run+0x16c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	2b00      	cmp	r3, #0
 8000488:	dc0a      	bgt.n	80004a0 <fsm_automatic_run+0x158>
			status = RED1_GREEN2;
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <fsm_automatic_run+0x164>)
 800048c:	2202      	movs	r2, #2
 800048e:	601a      	str	r2, [r3, #0]
			sec1 = red;
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <fsm_automatic_run+0x168>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a07      	ldr	r2, [pc, #28]	; (80004b4 <fsm_automatic_run+0x16c>)
 8000496:	6013      	str	r3, [r2, #0]
			sec2 = green;
 8000498:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <fsm_automatic_run+0x170>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a07      	ldr	r2, [pc, #28]	; (80004bc <fsm_automatic_run+0x174>)
 800049e:	6013      	str	r3, [r2, #0]
		}

		ifButton1Pressed();
 80004a0:	f7ff ff3c 	bl	800031c <ifButton1Pressed>
	default:
		break;
 80004a4:	bf00      	nop
	}

}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000118 	.word	0x20000118
 80004b0:	20000060 	.word	0x20000060
 80004b4:	2000011c 	.word	0x2000011c
 80004b8:	20000064 	.word	0x20000064
 80004bc:	20000120 	.word	0x20000120
 80004c0:	20000068 	.word	0x20000068

080004c4 <ledBalance>:

int redMod = 1;
int yellowMod = 1;
int greenMod = 1;

void ledBalance(){
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	if(red == (green + yellow)) return;
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <ledBalance+0x50>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4b12      	ldr	r3, [pc, #72]	; (8000518 <ledBalance+0x54>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	441a      	add	r2, r3
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <ledBalance+0x58>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	429a      	cmp	r2, r3
 80004d8:	d018      	beq.n	800050c <ledBalance+0x48>
	else if(red < (green + yellow)){
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <ledBalance+0x50>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <ledBalance+0x54>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	441a      	add	r2, r3
 80004e4:	4b0d      	ldr	r3, [pc, #52]	; (800051c <ledBalance+0x58>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	dd07      	ble.n	80004fc <ledBalance+0x38>
		red = green + yellow;
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <ledBalance+0x50>)
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4b09      	ldr	r3, [pc, #36]	; (8000518 <ledBalance+0x54>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4413      	add	r3, r2
 80004f6:	4a09      	ldr	r2, [pc, #36]	; (800051c <ledBalance+0x58>)
 80004f8:	6013      	str	r3, [r2, #0]
 80004fa:	e008      	b.n	800050e <ledBalance+0x4a>
	}
	else{
		green = red - yellow;
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <ledBalance+0x58>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <ledBalance+0x54>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	4a03      	ldr	r2, [pc, #12]	; (8000514 <ledBalance+0x50>)
 8000508:	6013      	str	r3, [r2, #0]
 800050a:	e000      	b.n	800050e <ledBalance+0x4a>
	if(red == (green + yellow)) return;
 800050c:	bf00      	nop
	}
}
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	20000064 	.word	0x20000064
 8000518:	20000068 	.word	0x20000068
 800051c:	20000060 	.word	0x20000060

08000520 <fsm_manual_run>:

void fsm_manual_run(){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	switch(status){
 8000524:	4b59      	ldr	r3, [pc, #356]	; (800068c <fsm_manual_run+0x16c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b0e      	cmp	r3, #14
 800052a:	d03d      	beq.n	80005a8 <fsm_manual_run+0x88>
 800052c:	2b0e      	cmp	r3, #14
 800052e:	f300 80a3 	bgt.w	8000678 <fsm_manual_run+0x158>
 8000532:	2b0c      	cmp	r3, #12
 8000534:	d002      	beq.n	800053c <fsm_manual_run+0x1c>
 8000536:	2b0d      	cmp	r3, #13
 8000538:	d06c      	beq.n	8000614 <fsm_manual_run+0xf4>
		if(isButtonPressed(2) == 1){
			green = greenMod;
		}
		break;
	default:
		break;
 800053a:	e09d      	b.n	8000678 <fsm_manual_run+0x158>
		if(timer_flag[2] == 1){
 800053c:	4b54      	ldr	r3, [pc, #336]	; (8000690 <fsm_manual_run+0x170>)
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d105      	bne.n	8000550 <fsm_manual_run+0x30>
			setTimer(250, 2);
 8000544:	2102      	movs	r1, #2
 8000546:	20fa      	movs	r0, #250	; 0xfa
 8000548:	f000 fede 	bl	8001308 <setTimer>
			toggleLedRED();
 800054c:	f000 fb0e 	bl	8000b6c <toggleLedRED>
		if(isButtonPressed(0) == 1){
 8000550:	2000      	movs	r0, #0
 8000552:	f7ff fdfb 	bl	800014c <isButtonPressed>
 8000556:	4603      	mov	r3, r0
 8000558:	2b01      	cmp	r3, #1
 800055a:	d108      	bne.n	800056e <fsm_manual_run+0x4e>
			status = MAN_YELLOW;
 800055c:	4b4b      	ldr	r3, [pc, #300]	; (800068c <fsm_manual_run+0x16c>)
 800055e:	220e      	movs	r2, #14
 8000560:	601a      	str	r2, [r3, #0]
			setTimer(250, 2);
 8000562:	2102      	movs	r1, #2
 8000564:	20fa      	movs	r0, #250	; 0xfa
 8000566:	f000 fecf 	bl	8001308 <setTimer>
			clearAllLED();
 800056a:	f000 f9ed 	bl	8000948 <clearAllLED>
		if(isButtonPressed(1) == 1){
 800056e:	2001      	movs	r0, #1
 8000570:	f7ff fdec 	bl	800014c <isButtonPressed>
 8000574:	4603      	mov	r3, r0
 8000576:	2b01      	cmp	r3, #1
 8000578:	d10b      	bne.n	8000592 <fsm_manual_run+0x72>
			redMod++;
 800057a:	4b46      	ldr	r3, [pc, #280]	; (8000694 <fsm_manual_run+0x174>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	3301      	adds	r3, #1
 8000580:	4a44      	ldr	r2, [pc, #272]	; (8000694 <fsm_manual_run+0x174>)
 8000582:	6013      	str	r3, [r2, #0]
			if(redMod > 99) redMod = 1;
 8000584:	4b43      	ldr	r3, [pc, #268]	; (8000694 <fsm_manual_run+0x174>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b63      	cmp	r3, #99	; 0x63
 800058a:	dd02      	ble.n	8000592 <fsm_manual_run+0x72>
 800058c:	4b41      	ldr	r3, [pc, #260]	; (8000694 <fsm_manual_run+0x174>)
 800058e:	2201      	movs	r2, #1
 8000590:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2) == 1){
 8000592:	2002      	movs	r0, #2
 8000594:	f7ff fdda 	bl	800014c <isButtonPressed>
 8000598:	4603      	mov	r3, r0
 800059a:	2b01      	cmp	r3, #1
 800059c:	d16e      	bne.n	800067c <fsm_manual_run+0x15c>
			red = redMod;
 800059e:	4b3d      	ldr	r3, [pc, #244]	; (8000694 <fsm_manual_run+0x174>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a3d      	ldr	r2, [pc, #244]	; (8000698 <fsm_manual_run+0x178>)
 80005a4:	6013      	str	r3, [r2, #0]
		break;
 80005a6:	e069      	b.n	800067c <fsm_manual_run+0x15c>
		if(timer_flag[2] == 1){
 80005a8:	4b39      	ldr	r3, [pc, #228]	; (8000690 <fsm_manual_run+0x170>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d105      	bne.n	80005bc <fsm_manual_run+0x9c>
			setTimer(250, 2);
 80005b0:	2102      	movs	r1, #2
 80005b2:	20fa      	movs	r0, #250	; 0xfa
 80005b4:	f000 fea8 	bl	8001308 <setTimer>
			toggleLedYELLOW();
 80005b8:	f000 faea 	bl	8000b90 <toggleLedYELLOW>
		if(isButtonPressed(0) == 1){
 80005bc:	2000      	movs	r0, #0
 80005be:	f7ff fdc5 	bl	800014c <isButtonPressed>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d108      	bne.n	80005da <fsm_manual_run+0xba>
			status = MAN_GREEN;
 80005c8:	4b30      	ldr	r3, [pc, #192]	; (800068c <fsm_manual_run+0x16c>)
 80005ca:	220d      	movs	r2, #13
 80005cc:	601a      	str	r2, [r3, #0]
			setTimer(250, 2);
 80005ce:	2102      	movs	r1, #2
 80005d0:	20fa      	movs	r0, #250	; 0xfa
 80005d2:	f000 fe99 	bl	8001308 <setTimer>
			clearAllLED();
 80005d6:	f000 f9b7 	bl	8000948 <clearAllLED>
		if(isButtonPressed(1) == 1){
 80005da:	2001      	movs	r0, #1
 80005dc:	f7ff fdb6 	bl	800014c <isButtonPressed>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d10b      	bne.n	80005fe <fsm_manual_run+0xde>
			yellowMod++;
 80005e6:	4b2d      	ldr	r3, [pc, #180]	; (800069c <fsm_manual_run+0x17c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	4a2b      	ldr	r2, [pc, #172]	; (800069c <fsm_manual_run+0x17c>)
 80005ee:	6013      	str	r3, [r2, #0]
			if(yellowMod > 99) yellowMod = 1;
 80005f0:	4b2a      	ldr	r3, [pc, #168]	; (800069c <fsm_manual_run+0x17c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b63      	cmp	r3, #99	; 0x63
 80005f6:	dd02      	ble.n	80005fe <fsm_manual_run+0xde>
 80005f8:	4b28      	ldr	r3, [pc, #160]	; (800069c <fsm_manual_run+0x17c>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2) == 1){
 80005fe:	2002      	movs	r0, #2
 8000600:	f7ff fda4 	bl	800014c <isButtonPressed>
 8000604:	4603      	mov	r3, r0
 8000606:	2b01      	cmp	r3, #1
 8000608:	d13a      	bne.n	8000680 <fsm_manual_run+0x160>
			yellow = yellowMod;
 800060a:	4b24      	ldr	r3, [pc, #144]	; (800069c <fsm_manual_run+0x17c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a24      	ldr	r2, [pc, #144]	; (80006a0 <fsm_manual_run+0x180>)
 8000610:	6013      	str	r3, [r2, #0]
		break;
 8000612:	e035      	b.n	8000680 <fsm_manual_run+0x160>
		if(timer_flag[2] == 1){
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <fsm_manual_run+0x170>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d105      	bne.n	8000628 <fsm_manual_run+0x108>
			setTimer(250, 2);
 800061c:	2102      	movs	r1, #2
 800061e:	20fa      	movs	r0, #250	; 0xfa
 8000620:	f000 fe72 	bl	8001308 <setTimer>
			toggleLedGREEN();
 8000624:	f000 face 	bl	8000bc4 <toggleLedGREEN>
		if(isButtonPressed(0) == 1){
 8000628:	2000      	movs	r0, #0
 800062a:	f7ff fd8f 	bl	800014c <isButtonPressed>
 800062e:	4603      	mov	r3, r0
 8000630:	2b01      	cmp	r3, #1
 8000632:	d104      	bne.n	800063e <fsm_manual_run+0x11e>
			ledBalance();
 8000634:	f7ff ff46 	bl	80004c4 <ledBalance>
			status = INIT;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <fsm_manual_run+0x16c>)
 800063a:	2201      	movs	r2, #1
 800063c:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(1) == 1){
 800063e:	2001      	movs	r0, #1
 8000640:	f7ff fd84 	bl	800014c <isButtonPressed>
 8000644:	4603      	mov	r3, r0
 8000646:	2b01      	cmp	r3, #1
 8000648:	d10b      	bne.n	8000662 <fsm_manual_run+0x142>
			greenMod++;
 800064a:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <fsm_manual_run+0x184>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	3301      	adds	r3, #1
 8000650:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <fsm_manual_run+0x184>)
 8000652:	6013      	str	r3, [r2, #0]
			if(greenMod > 99) greenMod = 1;
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <fsm_manual_run+0x184>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b63      	cmp	r3, #99	; 0x63
 800065a:	dd02      	ble.n	8000662 <fsm_manual_run+0x142>
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <fsm_manual_run+0x184>)
 800065e:	2201      	movs	r2, #1
 8000660:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2) == 1){
 8000662:	2002      	movs	r0, #2
 8000664:	f7ff fd72 	bl	800014c <isButtonPressed>
 8000668:	4603      	mov	r3, r0
 800066a:	2b01      	cmp	r3, #1
 800066c:	d10a      	bne.n	8000684 <fsm_manual_run+0x164>
			green = greenMod;
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <fsm_manual_run+0x184>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <fsm_manual_run+0x188>)
 8000674:	6013      	str	r3, [r2, #0]
		break;
 8000676:	e005      	b.n	8000684 <fsm_manual_run+0x164>
		break;
 8000678:	bf00      	nop
 800067a:	e004      	b.n	8000686 <fsm_manual_run+0x166>
		break;
 800067c:	bf00      	nop
 800067e:	e002      	b.n	8000686 <fsm_manual_run+0x166>
		break;
 8000680:	bf00      	nop
 8000682:	e000      	b.n	8000686 <fsm_manual_run+0x166>
		break;
 8000684:	bf00      	nop
	}
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000118 	.word	0x20000118
 8000690:	20000164 	.word	0x20000164
 8000694:	20000050 	.word	0x20000050
 8000698:	20000060 	.word	0x20000060
 800069c:	20000054 	.word	0x20000054
 80006a0:	20000068 	.word	0x20000068
 80006a4:	20000058 	.word	0x20000058
 80006a8:	20000064 	.word	0x20000064

080006ac <toggle_buzzer>:
int pedestrian_flag = 0;
int buzzer_flag = 0;
int delay = 500;
int adder = 0;

void toggle_buzzer(int volume){
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	if(buzzer_flag == 0){
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <toggle_buzzer+0x38>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d107      	bne.n	80006cc <toggle_buzzer+0x20>
		__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,volume);
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <toggle_buzzer+0x3c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	635a      	str	r2, [r3, #52]	; 0x34
		buzzer_flag = 1;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <toggle_buzzer+0x38>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	601a      	str	r2, [r3, #0]
	}
	else{
		__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,0);
		buzzer_flag = 0;
	}
}
 80006ca:	e006      	b.n	80006da <toggle_buzzer+0x2e>
		__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,0);
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <toggle_buzzer+0x3c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2200      	movs	r2, #0
 80006d2:	635a      	str	r2, [r3, #52]	; 0x34
		buzzer_flag = 0;
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <toggle_buzzer+0x38>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	20000110 	.word	0x20000110
 80006e8:	20000198 	.word	0x20000198

080006ec <reset_buzzer>:

void reset_buzzer(){
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,0);
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <reset_buzzer+0x1c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2200      	movs	r2, #0
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34
	adder = 0;
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <reset_buzzer+0x20>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	20000198 	.word	0x20000198
 800070c:	20000114 	.word	0x20000114

08000710 <buzzer_run>:

void buzzer_run(){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
	if(timer_flag[3] == 1){
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <buzzer_run+0x78>)
 8000718:	68db      	ldr	r3, [r3, #12]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d130      	bne.n	8000780 <buzzer_run+0x70>
		int volume;
		if(sec1 > 10){
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <buzzer_run+0x7c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b0a      	cmp	r3, #10
 8000724:	dd06      	ble.n	8000734 <buzzer_run+0x24>
			delay = 500;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <buzzer_run+0x80>)
 8000728:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800072c:	601a      	str	r2, [r3, #0]
			volume = 5;
 800072e:	2305      	movs	r3, #5
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	e01c      	b.n	800076e <buzzer_run+0x5e>
		}
		else{
			int period = 11 - sec1;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <buzzer_run+0x7c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f1c3 030b 	rsb	r3, r3, #11
 800073c:	603b      	str	r3, [r7, #0]
			delay = 500/period;
 800073e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	fb92 f3f3 	sdiv	r3, r2, r3
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <buzzer_run+0x80>)
 800074a:	6013      	str	r3, [r2, #0]
			volume =  (period-1)*period + 5;
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	3b01      	subs	r3, #1
 8000750:	683a      	ldr	r2, [r7, #0]
 8000752:	fb02 f303 	mul.w	r3, r2, r3
 8000756:	3305      	adds	r3, #5
 8000758:	607b      	str	r3, [r7, #4]
			volume += adder;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <buzzer_run+0x84>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	4413      	add	r3, r2
 8000762:	607b      	str	r3, [r7, #4]
			adder++;
 8000764:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <buzzer_run+0x84>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3301      	adds	r3, #1
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <buzzer_run+0x84>)
 800076c:	6013      	str	r3, [r2, #0]
		}
		toggle_buzzer(volume);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff9c 	bl	80006ac <toggle_buzzer>
		setTimer(delay, 3);
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <buzzer_run+0x80>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2103      	movs	r1, #3
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fdc4 	bl	8001308 <setTimer>
	}
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000164 	.word	0x20000164
 800078c:	2000011c 	.word	0x2000011c
 8000790:	2000005c 	.word	0x2000005c
 8000794:	20000114 	.word	0x20000114

08000798 <buzzer_init>:

void buzzer_init(){
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	delay = 500;
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <buzzer_init+0x54>)
 80007a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007a4:	601a      	str	r2, [r3, #0]
	adder = 0;
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <buzzer_init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
	if(sec1 > 10){
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <buzzer_init+0x5c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b0a      	cmp	r3, #10
 80007b2:	dd04      	ble.n	80007be <buzzer_init+0x26>
		delay = 500;
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <buzzer_init+0x54>)
 80007b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	e00b      	b.n	80007d6 <buzzer_init+0x3e>
	}
	else{
		int period = 11 - sec1;
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <buzzer_init+0x5c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f1c3 030b 	rsb	r3, r3, #11
 80007c6:	607b      	str	r3, [r7, #4]
		delay = 500/period;
 80007c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80007d2:	4a06      	ldr	r2, [pc, #24]	; (80007ec <buzzer_init+0x54>)
 80007d4:	6013      	str	r3, [r2, #0]
	}
	setTimer(delay, 3);
 80007d6:	4b05      	ldr	r3, [pc, #20]	; (80007ec <buzzer_init+0x54>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2103      	movs	r1, #3
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fd93 	bl	8001308 <setTimer>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000005c 	.word	0x2000005c
 80007f0:	20000114 	.word	0x20000114
 80007f4:	2000011c 	.word	0x2000011c

080007f8 <fsm_pedestrian_run>:

void fsm_pedestrian_run(){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
	if(isButtonPressed(3) == 1){
 80007fe:	2003      	movs	r0, #3
 8000800:	f7ff fca4 	bl	800014c <isButtonPressed>
 8000804:	4603      	mov	r3, r0
 8000806:	2b01      	cmp	r3, #1
 8000808:	d115      	bne.n	8000836 <fsm_pedestrian_run+0x3e>
		pedestrian_flag = 1;
 800080a:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <fsm_pedestrian_run+0xc0>)
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]
		int pedestrianLightPeriod = (red + yellow + green)*2*1000;
 8000810:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <fsm_pedestrian_run+0xc4>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <fsm_pedestrian_run+0xc8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	441a      	add	r2, r3
 800081a:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <fsm_pedestrian_run+0xcc>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4413      	add	r3, r2
 8000820:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000824:	fb02 f303 	mul.w	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]
		setTimer(pedestrianLightPeriod, 1);
 800082a:	2101      	movs	r1, #1
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f000 fd6b 	bl	8001308 <setTimer>
		buzzer_init();
 8000832:	f7ff ffb1 	bl	8000798 <buzzer_init>
	}

	if(timer_flag[1] == 1){
 8000836:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <fsm_pedestrian_run+0xd0>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d107      	bne.n	800084e <fsm_pedestrian_run+0x56>
		pedestrian_flag = 0;
 800083e:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <fsm_pedestrian_run+0xc0>)
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
		turnonPedestrianLight(CLEAR);
 8000844:	2004      	movs	r0, #4
 8000846:	f000 f93f 	bl	8000ac8 <turnonPedestrianLight>
		reset_buzzer();
 800084a:	f7ff ff4f 	bl	80006ec <reset_buzzer>
	}

	if(pedestrian_flag){
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <fsm_pedestrian_run+0xc0>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d028      	beq.n	80008a8 <fsm_pedestrian_run+0xb0>
		switch(status){
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <fsm_pedestrian_run+0xd4>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3b02      	subs	r3, #2
 800085c:	2b03      	cmp	r3, #3
 800085e:	d825      	bhi.n	80008ac <fsm_pedestrian_run+0xb4>
 8000860:	a201      	add	r2, pc, #4	; (adr r2, 8000868 <fsm_pedestrian_run+0x70>)
 8000862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000866:	bf00      	nop
 8000868:	08000879 	.word	0x08000879
 800086c:	08000885 	.word	0x08000885
 8000870:	08000891 	.word	0x08000891
 8000874:	0800089d 	.word	0x0800089d
		case RED1_GREEN2:
			turnonPedestrianLight(GREEN);
 8000878:	2002      	movs	r0, #2
 800087a:	f000 f925 	bl	8000ac8 <turnonPedestrianLight>
			buzzer_run();
 800087e:	f7ff ff47 	bl	8000710 <buzzer_run>
			break;
 8000882:	e014      	b.n	80008ae <fsm_pedestrian_run+0xb6>
		case RED1_YELLOW2:
			turnonPedestrianLight(YELLOW);
 8000884:	2003      	movs	r0, #3
 8000886:	f000 f91f 	bl	8000ac8 <turnonPedestrianLight>
			buzzer_run();
 800088a:	f7ff ff41 	bl	8000710 <buzzer_run>
			break;
 800088e:	e00e      	b.n	80008ae <fsm_pedestrian_run+0xb6>
		case GREEN1_RED2:
			turnonPedestrianLight(RED);
 8000890:	2001      	movs	r0, #1
 8000892:	f000 f919 	bl	8000ac8 <turnonPedestrianLight>
			reset_buzzer();
 8000896:	f7ff ff29 	bl	80006ec <reset_buzzer>
			break;
 800089a:	e008      	b.n	80008ae <fsm_pedestrian_run+0xb6>
		case YELLOW1_RED2:
			turnonPedestrianLight(RED);
 800089c:	2001      	movs	r0, #1
 800089e:	f000 f913 	bl	8000ac8 <turnonPedestrianLight>
			reset_buzzer();
 80008a2:	f7ff ff23 	bl	80006ec <reset_buzzer>
			break;
 80008a6:	e002      	b.n	80008ae <fsm_pedestrian_run+0xb6>
		default:
			break;
		}
	}
 80008a8:	bf00      	nop
 80008aa:	e000      	b.n	80008ae <fsm_pedestrian_run+0xb6>
			break;
 80008ac:	bf00      	nop
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000010c 	.word	0x2000010c
 80008bc:	20000060 	.word	0x20000060
 80008c0:	20000068 	.word	0x20000068
 80008c4:	20000064 	.word	0x20000064
 80008c8:	20000164 	.word	0x20000164
 80008cc:	20000118 	.word	0x20000118

080008d0 <updateClockBuffer>:
int sec1 = 0;
int sec2 = 0;

int led_buffer[4] = {0, 0, 0, 0};

void updateClockBuffer(int sec1, int sec2){
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
	led_buffer[0] = sec1/10;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a18      	ldr	r2, [pc, #96]	; (8000940 <updateClockBuffer+0x70>)
 80008de:	fb82 1203 	smull	r1, r2, r2, r3
 80008e2:	1092      	asrs	r2, r2, #2
 80008e4:	17db      	asrs	r3, r3, #31
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	4a16      	ldr	r2, [pc, #88]	; (8000944 <updateClockBuffer+0x74>)
 80008ea:	6013      	str	r3, [r2, #0]
	led_buffer[1] = sec1%10;
 80008ec:	6879      	ldr	r1, [r7, #4]
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <updateClockBuffer+0x70>)
 80008f0:	fb83 2301 	smull	r2, r3, r3, r1
 80008f4:	109a      	asrs	r2, r3, #2
 80008f6:	17cb      	asrs	r3, r1, #31
 80008f8:	1ad2      	subs	r2, r2, r3
 80008fa:	4613      	mov	r3, r2
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	4413      	add	r3, r2
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	1aca      	subs	r2, r1, r3
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <updateClockBuffer+0x74>)
 8000906:	605a      	str	r2, [r3, #4]
	led_buffer[2] = sec2/10;
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <updateClockBuffer+0x70>)
 800090c:	fb82 1203 	smull	r1, r2, r2, r3
 8000910:	1092      	asrs	r2, r2, #2
 8000912:	17db      	asrs	r3, r3, #31
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <updateClockBuffer+0x74>)
 8000918:	6093      	str	r3, [r2, #8]
	led_buffer[3] = sec2%10;
 800091a:	6839      	ldr	r1, [r7, #0]
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <updateClockBuffer+0x70>)
 800091e:	fb83 2301 	smull	r2, r3, r3, r1
 8000922:	109a      	asrs	r2, r3, #2
 8000924:	17cb      	asrs	r3, r1, #31
 8000926:	1ad2      	subs	r2, r2, r3
 8000928:	4613      	mov	r3, r2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	4413      	add	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	1aca      	subs	r2, r1, r3
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <updateClockBuffer+0x74>)
 8000934:	60da      	str	r2, [r3, #12]
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	66666667 	.word	0x66666667
 8000944:	20000124 	.word	0x20000124

08000948 <clearAllLED>:

void clearAllLED(){
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Traffic_Light1_1_GPIO_Port, Traffic_Light1_1_Pin, RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000952:	4810      	ldr	r0, [pc, #64]	; (8000994 <clearAllLED+0x4c>)
 8000954:	f001 fa89 	bl	8001e6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Traffic_Light1_2_GPIO_Port, Traffic_Light1_2_Pin, RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2108      	movs	r1, #8
 800095c:	480e      	ldr	r0, [pc, #56]	; (8000998 <clearAllLED+0x50>)
 800095e:	f001 fa84 	bl	8001e6a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Traffic_Light2_1_GPIO_Port, Traffic_Light2_1_Pin, RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2120      	movs	r1, #32
 8000966:	480c      	ldr	r0, [pc, #48]	; (8000998 <clearAllLED+0x50>)
 8000968:	f001 fa7f 	bl	8001e6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Traffic_Light2_2_GPIO_Port, Traffic_Light2_2_Pin, RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2110      	movs	r1, #16
 8000970:	4809      	ldr	r0, [pc, #36]	; (8000998 <clearAllLED+0x50>)
 8000972:	f001 fa7a 	bl	8001e6a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Pedestrian_Light_1_GPIO_Port, Pedestrian_Light_1_Pin, RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800097c:	4806      	ldr	r0, [pc, #24]	; (8000998 <clearAllLED+0x50>)
 800097e:	f001 fa74 	bl	8001e6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Pedestrian_Light_2_GPIO_Port, Pedestrian_Light_2_Pin, RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <clearAllLED+0x4c>)
 800098a:	f001 fa6e 	bl	8001e6a <HAL_GPIO_WritePin>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40010800 	.word	0x40010800
 8000998:	40010c00 	.word	0x40010c00

0800099c <turnonTrafficLight1>:

void turnonTrafficLight1(int led){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	d83b      	bhi.n	8000a24 <turnonTrafficLight1+0x88>
 80009ac:	a201      	add	r2, pc, #4	; (adr r2, 80009b4 <turnonTrafficLight1+0x18>)
 80009ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b2:	bf00      	nop
 80009b4:	080009c5 	.word	0x080009c5
 80009b8:	080009dd 	.word	0x080009dd
 80009bc:	080009f5 	.word	0x080009f5
 80009c0:	08000a0d 	.word	0x08000a0d
	switch(led){
	case RED:
		HAL_GPIO_WritePin(Traffic_Light1_1_GPIO_Port, Traffic_Light1_1_Pin, SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ca:	4819      	ldr	r0, [pc, #100]	; (8000a30 <turnonTrafficLight1+0x94>)
 80009cc:	f001 fa4d 	bl	8001e6a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_Light1_2_GPIO_Port, Traffic_Light1_2_Pin, RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2108      	movs	r1, #8
 80009d4:	4817      	ldr	r0, [pc, #92]	; (8000a34 <turnonTrafficLight1+0x98>)
 80009d6:	f001 fa48 	bl	8001e6a <HAL_GPIO_WritePin>
		break;
 80009da:	e024      	b.n	8000a26 <turnonTrafficLight1+0x8a>
	case GREEN:
		HAL_GPIO_WritePin(Traffic_Light1_1_GPIO_Port, Traffic_Light1_1_Pin, RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e2:	4813      	ldr	r0, [pc, #76]	; (8000a30 <turnonTrafficLight1+0x94>)
 80009e4:	f001 fa41 	bl	8001e6a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_Light1_2_GPIO_Port, Traffic_Light1_2_Pin, SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	2108      	movs	r1, #8
 80009ec:	4811      	ldr	r0, [pc, #68]	; (8000a34 <turnonTrafficLight1+0x98>)
 80009ee:	f001 fa3c 	bl	8001e6a <HAL_GPIO_WritePin>
		break;
 80009f2:	e018      	b.n	8000a26 <turnonTrafficLight1+0x8a>
	case YELLOW:
		HAL_GPIO_WritePin(Traffic_Light1_1_GPIO_Port, Traffic_Light1_1_Pin, SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fa:	480d      	ldr	r0, [pc, #52]	; (8000a30 <turnonTrafficLight1+0x94>)
 80009fc:	f001 fa35 	bl	8001e6a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_Light1_2_GPIO_Port, Traffic_Light1_2_Pin, SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2108      	movs	r1, #8
 8000a04:	480b      	ldr	r0, [pc, #44]	; (8000a34 <turnonTrafficLight1+0x98>)
 8000a06:	f001 fa30 	bl	8001e6a <HAL_GPIO_WritePin>
		break;
 8000a0a:	e00c      	b.n	8000a26 <turnonTrafficLight1+0x8a>
	case CLEAR:
		HAL_GPIO_WritePin(Traffic_Light1_1_GPIO_Port, Traffic_Light1_1_Pin, RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a12:	4807      	ldr	r0, [pc, #28]	; (8000a30 <turnonTrafficLight1+0x94>)
 8000a14:	f001 fa29 	bl	8001e6a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_Light1_2_GPIO_Port, Traffic_Light1_2_Pin, RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2108      	movs	r1, #8
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <turnonTrafficLight1+0x98>)
 8000a1e:	f001 fa24 	bl	8001e6a <HAL_GPIO_WritePin>
		break;
 8000a22:	e000      	b.n	8000a26 <turnonTrafficLight1+0x8a>
	default:
		break;
 8000a24:	bf00      	nop
	}
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40010800 	.word	0x40010800
 8000a34:	40010c00 	.word	0x40010c00

08000a38 <turnonTrafficLight2>:

void turnonTrafficLight2(int led){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	d837      	bhi.n	8000ab8 <turnonTrafficLight2+0x80>
 8000a48:	a201      	add	r2, pc, #4	; (adr r2, 8000a50 <turnonTrafficLight2+0x18>)
 8000a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4e:	bf00      	nop
 8000a50:	08000a61 	.word	0x08000a61
 8000a54:	08000a77 	.word	0x08000a77
 8000a58:	08000a8d 	.word	0x08000a8d
 8000a5c:	08000aa3 	.word	0x08000aa3
	switch(led){
	case RED:
		HAL_GPIO_WritePin(Traffic_Light2_1_GPIO_Port, Traffic_Light2_1_Pin, SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2120      	movs	r1, #32
 8000a64:	4817      	ldr	r0, [pc, #92]	; (8000ac4 <turnonTrafficLight2+0x8c>)
 8000a66:	f001 fa00 	bl	8001e6a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_Light2_2_GPIO_Port, Traffic_Light2_2_Pin, RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2110      	movs	r1, #16
 8000a6e:	4815      	ldr	r0, [pc, #84]	; (8000ac4 <turnonTrafficLight2+0x8c>)
 8000a70:	f001 f9fb 	bl	8001e6a <HAL_GPIO_WritePin>
		break;
 8000a74:	e021      	b.n	8000aba <turnonTrafficLight2+0x82>
	case GREEN:
		HAL_GPIO_WritePin(Traffic_Light2_1_GPIO_Port, Traffic_Light2_1_Pin, RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2120      	movs	r1, #32
 8000a7a:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <turnonTrafficLight2+0x8c>)
 8000a7c:	f001 f9f5 	bl	8001e6a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_Light2_2_GPIO_Port, Traffic_Light2_2_Pin, SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2110      	movs	r1, #16
 8000a84:	480f      	ldr	r0, [pc, #60]	; (8000ac4 <turnonTrafficLight2+0x8c>)
 8000a86:	f001 f9f0 	bl	8001e6a <HAL_GPIO_WritePin>
		break;
 8000a8a:	e016      	b.n	8000aba <turnonTrafficLight2+0x82>
	case YELLOW:
		HAL_GPIO_WritePin(Traffic_Light2_1_GPIO_Port, Traffic_Light2_1_Pin, SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2120      	movs	r1, #32
 8000a90:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <turnonTrafficLight2+0x8c>)
 8000a92:	f001 f9ea 	bl	8001e6a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_Light2_2_GPIO_Port, Traffic_Light2_2_Pin, SET);
 8000a96:	2201      	movs	r2, #1
 8000a98:	2110      	movs	r1, #16
 8000a9a:	480a      	ldr	r0, [pc, #40]	; (8000ac4 <turnonTrafficLight2+0x8c>)
 8000a9c:	f001 f9e5 	bl	8001e6a <HAL_GPIO_WritePin>
		break;
 8000aa0:	e00b      	b.n	8000aba <turnonTrafficLight2+0x82>
	case CLEAR:
		HAL_GPIO_WritePin(Traffic_Light2_1_GPIO_Port, Traffic_Light2_1_Pin, RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <turnonTrafficLight2+0x8c>)
 8000aa8:	f001 f9df 	bl	8001e6a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_Light2_2_GPIO_Port, Traffic_Light2_2_Pin, RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2110      	movs	r1, #16
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <turnonTrafficLight2+0x8c>)
 8000ab2:	f001 f9da 	bl	8001e6a <HAL_GPIO_WritePin>
		break;
 8000ab6:	e000      	b.n	8000aba <turnonTrafficLight2+0x82>
	default:
		break;
 8000ab8:	bf00      	nop
	}
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40010c00 	.word	0x40010c00

08000ac8 <turnonPedestrianLight>:

void turnonPedestrianLight(int led){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	2b03      	cmp	r3, #3
 8000ad6:	d83f      	bhi.n	8000b58 <turnonPedestrianLight+0x90>
 8000ad8:	a201      	add	r2, pc, #4	; (adr r2, 8000ae0 <turnonPedestrianLight+0x18>)
 8000ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ade:	bf00      	nop
 8000ae0:	08000af1 	.word	0x08000af1
 8000ae4:	08000b0b 	.word	0x08000b0b
 8000ae8:	08000b25 	.word	0x08000b25
 8000aec:	08000b3f 	.word	0x08000b3f
	switch(led){
	case RED:
		HAL_GPIO_WritePin(Pedestrian_Light_1_GPIO_Port, Pedestrian_Light_1_Pin, SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af6:	481b      	ldr	r0, [pc, #108]	; (8000b64 <turnonPedestrianLight+0x9c>)
 8000af8:	f001 f9b7 	bl	8001e6a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Pedestrian_Light_2_GPIO_Port, Pedestrian_Light_2_Pin, RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b02:	4819      	ldr	r0, [pc, #100]	; (8000b68 <turnonPedestrianLight+0xa0>)
 8000b04:	f001 f9b1 	bl	8001e6a <HAL_GPIO_WritePin>
		break;
 8000b08:	e027      	b.n	8000b5a <turnonPedestrianLight+0x92>
	case GREEN:
		HAL_GPIO_WritePin(Pedestrian_Light_1_GPIO_Port, Pedestrian_Light_1_Pin, RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b10:	4814      	ldr	r0, [pc, #80]	; (8000b64 <turnonPedestrianLight+0x9c>)
 8000b12:	f001 f9aa 	bl	8001e6a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Pedestrian_Light_2_GPIO_Port, Pedestrian_Light_2_Pin, SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b1c:	4812      	ldr	r0, [pc, #72]	; (8000b68 <turnonPedestrianLight+0xa0>)
 8000b1e:	f001 f9a4 	bl	8001e6a <HAL_GPIO_WritePin>
		break;
 8000b22:	e01a      	b.n	8000b5a <turnonPedestrianLight+0x92>
	case YELLOW:
		HAL_GPIO_WritePin(Pedestrian_Light_1_GPIO_Port, Pedestrian_Light_1_Pin, SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b2a:	480e      	ldr	r0, [pc, #56]	; (8000b64 <turnonPedestrianLight+0x9c>)
 8000b2c:	f001 f99d 	bl	8001e6a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Pedestrian_Light_2_GPIO_Port, Pedestrian_Light_2_Pin, SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b36:	480c      	ldr	r0, [pc, #48]	; (8000b68 <turnonPedestrianLight+0xa0>)
 8000b38:	f001 f997 	bl	8001e6a <HAL_GPIO_WritePin>
		break;
 8000b3c:	e00d      	b.n	8000b5a <turnonPedestrianLight+0x92>
	case CLEAR:
		HAL_GPIO_WritePin(Pedestrian_Light_1_GPIO_Port, Pedestrian_Light_1_Pin, RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b44:	4807      	ldr	r0, [pc, #28]	; (8000b64 <turnonPedestrianLight+0x9c>)
 8000b46:	f001 f990 	bl	8001e6a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Pedestrian_Light_2_GPIO_Port, Pedestrian_Light_2_Pin, RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <turnonPedestrianLight+0xa0>)
 8000b52:	f001 f98a 	bl	8001e6a <HAL_GPIO_WritePin>
		break;
 8000b56:	e000      	b.n	8000b5a <turnonPedestrianLight+0x92>
	default:
		break;
 8000b58:	bf00      	nop
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40010c00 	.word	0x40010c00
 8000b68:	40010800 	.word	0x40010800

08000b6c <toggleLedRED>:

void toggleLedRED(){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Traffic_Light1_1_GPIO_Port, Traffic_Light1_1_Pin);
 8000b70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <toggleLedRED+0x1c>)
 8000b76:	f001 f990 	bl	8001e9a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Traffic_Light2_1_GPIO_Port, Traffic_Light2_1_Pin);
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	4803      	ldr	r0, [pc, #12]	; (8000b8c <toggleLedRED+0x20>)
 8000b7e:	f001 f98c 	bl	8001e9a <HAL_GPIO_TogglePin>
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40010800 	.word	0x40010800
 8000b8c:	40010c00 	.word	0x40010c00

08000b90 <toggleLedYELLOW>:

void toggleLedYELLOW(){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Traffic_Light1_1_GPIO_Port, Traffic_Light1_1_Pin);
 8000b94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b98:	4808      	ldr	r0, [pc, #32]	; (8000bbc <toggleLedYELLOW+0x2c>)
 8000b9a:	f001 f97e 	bl	8001e9a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Traffic_Light1_2_GPIO_Port, Traffic_Light1_2_Pin);
 8000b9e:	2108      	movs	r1, #8
 8000ba0:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <toggleLedYELLOW+0x30>)
 8000ba2:	f001 f97a 	bl	8001e9a <HAL_GPIO_TogglePin>

	HAL_GPIO_TogglePin(Traffic_Light2_1_GPIO_Port, Traffic_Light2_1_Pin);
 8000ba6:	2120      	movs	r1, #32
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <toggleLedYELLOW+0x30>)
 8000baa:	f001 f976 	bl	8001e9a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Traffic_Light2_2_GPIO_Port, Traffic_Light2_2_Pin);
 8000bae:	2110      	movs	r1, #16
 8000bb0:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <toggleLedYELLOW+0x30>)
 8000bb2:	f001 f972 	bl	8001e9a <HAL_GPIO_TogglePin>
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40010800 	.word	0x40010800
 8000bc0:	40010c00 	.word	0x40010c00

08000bc4 <toggleLedGREEN>:

void toggleLedGREEN(){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Traffic_Light1_2_GPIO_Port, Traffic_Light1_2_Pin);
 8000bc8:	2108      	movs	r1, #8
 8000bca:	4804      	ldr	r0, [pc, #16]	; (8000bdc <toggleLedGREEN+0x18>)
 8000bcc:	f001 f965 	bl	8001e9a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Traffic_Light2_2_GPIO_Port, Traffic_Light2_2_Pin);
 8000bd0:	2110      	movs	r1, #16
 8000bd2:	4802      	ldr	r0, [pc, #8]	; (8000bdc <toggleLedGREEN+0x18>)
 8000bd4:	f001 f961 	bl	8001e9a <HAL_GPIO_TogglePin>
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40010c00 	.word	0x40010c00

08000be0 <UART_Transmit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char str[50];
void UART_Transmit(){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af02      	add	r7, sp, #8
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!7SEG1: %d%d#  !7SEG2: %d%d#\r\n",
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <UART_Transmit+0x3c>)
 8000be8:	6819      	ldr	r1, [r3, #0]
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <UART_Transmit+0x3c>)
 8000bec:	6858      	ldr	r0, [r3, #4]
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <UART_Transmit+0x3c>)
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <UART_Transmit+0x3c>)
 8000bf4:	68d2      	ldr	r2, [r2, #12]
 8000bf6:	9201      	str	r2, [sp, #4]
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	460a      	mov	r2, r1
 8000bfe:	4908      	ldr	r1, [pc, #32]	; (8000c20 <UART_Transmit+0x40>)
 8000c00:	4808      	ldr	r0, [pc, #32]	; (8000c24 <UART_Transmit+0x44>)
 8000c02:	f003 fc0f 	bl	8004424 <siprintf>
 8000c06:	4603      	mov	r3, r0
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0e:	4905      	ldr	r1, [pc, #20]	; (8000c24 <UART_Transmit+0x44>)
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <UART_Transmit+0x48>)
 8000c12:	f002 fd3b 	bl	800368c <HAL_UART_Transmit>
			          led_buffer[0], led_buffer[1], led_buffer[2], led_buffer[3]), 1000);
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000124 	.word	0x20000124
 8000c20:	08004b44 	.word	0x08004b44
 8000c24:	20000270 	.word	0x20000270
 8000c28:	20000228 	.word	0x20000228

08000c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c30:	f000 fd5e 	bl	80016f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c34:	f000 f84a 	bl	8000ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c38:	f000 f976 	bl	8000f28 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c3c:	f000 f888 	bl	8000d50 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c40:	f000 f8d2 	bl	8000de8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000c44:	f000 f946 	bl	8000ed4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c48:	4817      	ldr	r0, [pc, #92]	; (8000ca8 <main+0x7c>)
 8000c4a:	f001 fdb9 	bl	80027c0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4816      	ldr	r0, [pc, #88]	; (8000cac <main+0x80>)
 8000c52:	f001 fe5f 	bl	8002914 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  clearAllLED();
 8000c56:	f7ff fe77 	bl	8000948 <clearAllLED>
  status = INIT;
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <main+0x84>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	601a      	str	r2, [r3, #0]
  SCH_Init();
 8000c60:	f000 fa18 	bl	8001094 <SCH_Init>
  SCH_Add_Task(timerRun, 0, 1);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2100      	movs	r1, #0
 8000c68:	4812      	ldr	r0, [pc, #72]	; (8000cb4 <main+0x88>)
 8000c6a:	f000 fa29 	bl	80010c0 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 1);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2100      	movs	r1, #0
 8000c72:	4811      	ldr	r0, [pc, #68]	; (8000cb8 <main+0x8c>)
 8000c74:	f000 fa24 	bl	80010c0 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run, 0, 1);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	480f      	ldr	r0, [pc, #60]	; (8000cbc <main+0x90>)
 8000c7e:	f000 fa1f 	bl	80010c0 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 1);
 8000c82:	2201      	movs	r2, #1
 8000c84:	2100      	movs	r1, #0
 8000c86:	480e      	ldr	r0, [pc, #56]	; (8000cc0 <main+0x94>)
 8000c88:	f000 fa1a 	bl	80010c0 <SCH_Add_Task>
  SCH_Add_Task(fsm_pedestrian_run, 0, 1);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2100      	movs	r1, #0
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <main+0x98>)
 8000c92:	f000 fa15 	bl	80010c0 <SCH_Add_Task>
  SCH_Add_Task(UART_Transmit, 101, 100);
 8000c96:	2264      	movs	r2, #100	; 0x64
 8000c98:	2165      	movs	r1, #101	; 0x65
 8000c9a:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <main+0x9c>)
 8000c9c:	f000 fa10 	bl	80010c0 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000ca0:	f000 faba 	bl	8001218 <SCH_Dispatch_Tasks>
 8000ca4:	e7fc      	b.n	8000ca0 <main+0x74>
 8000ca6:	bf00      	nop
 8000ca8:	200001e0 	.word	0x200001e0
 8000cac:	20000198 	.word	0x20000198
 8000cb0:	20000118 	.word	0x20000118
 8000cb4:	08001355 	.word	0x08001355
 8000cb8:	080001a1 	.word	0x080001a1
 8000cbc:	08000349 	.word	0x08000349
 8000cc0:	08000521 	.word	0x08000521
 8000cc4:	080007f9 	.word	0x080007f9
 8000cc8:	08000be1 	.word	0x08000be1

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b090      	sub	sp, #64	; 0x40
 8000cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd2:	f107 0318 	add.w	r3, r7, #24
 8000cd6:	2228      	movs	r2, #40	; 0x28
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f003 fae4 	bl	80042a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf6:	2310      	movs	r3, #16
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d02:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d08:	f107 0318 	add.w	r3, r7, #24
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f001 f8f9 	bl	8001f04 <HAL_RCC_OscConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d18:	f000 f98a 	bl	8001030 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d20:	2302      	movs	r3, #2
 8000d22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2102      	movs	r1, #2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 fb64 	bl	8002404 <HAL_RCC_ClockConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d42:	f000 f975 	bl	8001030 <Error_Handler>
  }
}
 8000d46:	bf00      	nop
 8000d48:	3740      	adds	r7, #64	; 0x40
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d64:	463b      	mov	r3, r7
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d76:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000d7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d84:	2263      	movs	r2, #99	; 0x63
 8000d86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d94:	4813      	ldr	r0, [pc, #76]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d96:	f001 fcc3 	bl	8002720 <HAL_TIM_Base_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000da0:	f000 f946 	bl	8001030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	4619      	mov	r1, r3
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000db2:	f002 f81b 	bl	8002dec <HAL_TIM_ConfigClockSource>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000dbc:	f000 f938 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc8:	463b      	mov	r3, r7
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000dce:	f002 fb9d 	bl	800350c <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000dd8:	f000 f92a 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200001e0 	.word	0x200001e0

08000de8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08e      	sub	sp, #56	; 0x38
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	f107 0320 	add.w	r3, r7, #32
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
 8000e14:	615a      	str	r2, [r3, #20]
 8000e16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e18:	4b2c      	ldr	r3, [pc, #176]	; (8000ecc <MX_TIM3_Init+0xe4>)
 8000e1a:	4a2d      	ldr	r2, [pc, #180]	; (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 983;
 8000e1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <MX_TIM3_Init+0xe4>)
 8000e20:	f240 32d7 	movw	r2, #983	; 0x3d7
 8000e24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <MX_TIM3_Init+0xe4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 254;
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <MX_TIM3_Init+0xe4>)
 8000e2e:	22fe      	movs	r2, #254	; 0xfe
 8000e30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e32:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <MX_TIM3_Init+0xe4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <MX_TIM3_Init+0xe4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e3e:	4823      	ldr	r0, [pc, #140]	; (8000ecc <MX_TIM3_Init+0xe4>)
 8000e40:	f001 fc6e 	bl	8002720 <HAL_TIM_Base_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000e4a:	f000 f8f1 	bl	8001030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	481c      	ldr	r0, [pc, #112]	; (8000ecc <MX_TIM3_Init+0xe4>)
 8000e5c:	f001 ffc6 	bl	8002dec <HAL_TIM_ConfigClockSource>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000e66:	f000 f8e3 	bl	8001030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e6a:	4818      	ldr	r0, [pc, #96]	; (8000ecc <MX_TIM3_Init+0xe4>)
 8000e6c:	f001 fcfa 	bl	8002864 <HAL_TIM_PWM_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e76:	f000 f8db 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e82:	f107 0320 	add.w	r3, r7, #32
 8000e86:	4619      	mov	r1, r3
 8000e88:	4810      	ldr	r0, [pc, #64]	; (8000ecc <MX_TIM3_Init+0xe4>)
 8000e8a:	f002 fb3f 	bl	800350c <HAL_TIMEx_MasterConfigSynchronization>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e94:	f000 f8cc 	bl	8001030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e98:	2360      	movs	r3, #96	; 0x60
 8000e9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4619      	mov	r1, r3
 8000eae:	4807      	ldr	r0, [pc, #28]	; (8000ecc <MX_TIM3_Init+0xe4>)
 8000eb0:	f001 feda 	bl	8002c68 <HAL_TIM_PWM_ConfigChannel>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000eba:	f000 f8b9 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ebe:	4803      	ldr	r0, [pc, #12]	; (8000ecc <MX_TIM3_Init+0xe4>)
 8000ec0:	f000 faea 	bl	8001498 <HAL_TIM_MspPostInit>

}
 8000ec4:	bf00      	nop
 8000ec6:	3738      	adds	r7, #56	; 0x38
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000198 	.word	0x20000198
 8000ed0:	40000400 	.word	0x40000400

08000ed4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <MX_USART2_UART_Init+0x50>)
 8000edc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ee4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000f0c:	f002 fb6e 	bl	80035ec <HAL_UART_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f16:	f000 f88b 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000228 	.word	0x20000228
 8000f24:	40004400 	.word	0x40004400

08000f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3c:	4b34      	ldr	r3, [pc, #208]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a33      	ldr	r2, [pc, #204]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f42:	f043 0320 	orr.w	r3, r3, #32
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b31      	ldr	r3, [pc, #196]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0320 	and.w	r3, r3, #32
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b2e      	ldr	r3, [pc, #184]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a2d      	ldr	r2, [pc, #180]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a27      	ldr	r2, [pc, #156]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f72:	f043 0308 	orr.w	r3, r3, #8
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b25      	ldr	r3, [pc, #148]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0308 	and.w	r3, r3, #8
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pedestrian_Light_1_Pin|Traffic_Light1_2_Pin|Traffic_Light2_2_Pin|Traffic_Light2_1_Pin, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000f8a:	4822      	ldr	r0, [pc, #136]	; (8001014 <MX_GPIO_Init+0xec>)
 8000f8c:	f000 ff6d 	bl	8001e6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Pedestrian_Light_2_Pin|Traffic_Light1_1_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000f96:	4820      	ldr	r0, [pc, #128]	; (8001018 <MX_GPIO_Init+0xf0>)
 8000f98:	f000 ff67 	bl	8001e6a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Pedestrian_Button_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Pedestrian_Button_Pin|Button1_Pin|Button2_Pin;
 8000f9c:	2313      	movs	r3, #19
 8000f9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	4619      	mov	r1, r3
 8000fae:	481a      	ldr	r0, [pc, #104]	; (8001018 <MX_GPIO_Init+0xf0>)
 8000fb0:	f000 fdc0 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4813      	ldr	r0, [pc, #76]	; (8001014 <MX_GPIO_Init+0xec>)
 8000fc8:	f000 fdb4 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pedestrian_Light_1_Pin Traffic_Light1_2_Pin Traffic_Light2_2_Pin Traffic_Light2_1_Pin */
  GPIO_InitStruct.Pin = Pedestrian_Light_1_Pin|Traffic_Light1_2_Pin|Traffic_Light2_2_Pin|Traffic_Light2_1_Pin;
 8000fcc:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000fd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fde:	f107 0310 	add.w	r3, r7, #16
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <MX_GPIO_Init+0xec>)
 8000fe6:	f000 fda5 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pedestrian_Light_2_Pin Traffic_Light1_1_Pin */
  GPIO_InitStruct.Pin = Pedestrian_Light_2_Pin|Traffic_Light1_1_Pin;
 8000fea:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000fee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	4619      	mov	r1, r3
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_GPIO_Init+0xf0>)
 8001004:	f000 fd96 	bl	8001b34 <HAL_GPIO_Init>

}
 8001008:	bf00      	nop
 800100a:	3720      	adds	r7, #32
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40021000 	.word	0x40021000
 8001014:	40010c00 	.word	0x40010c00
 8001018:	40010800 	.word	0x40010800

0800101c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001024:	f000 f8d4 	bl	80011d0 <SCH_Update>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001034:	b672      	cpsid	i
}
 8001036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001038:	e7fe      	b.n	8001038 <Error_Handler+0x8>
	...

0800103c <get_new_ID>:
sTask *head = NULL;

uint8_t current_index_task = 0;
int deleted_ID = -1;

uint32_t get_new_ID(){
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
	uint32_t newID;
    if(deleted_ID >= 0){
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <get_new_ID+0x40>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db08      	blt.n	800105c <get_new_ID+0x20>
    	newID = deleted_ID;
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <get_new_ID+0x40>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	607b      	str	r3, [r7, #4]
    	deleted_ID = -1;
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <get_new_ID+0x40>)
 8001052:	f04f 32ff 	mov.w	r2, #4294967295
 8001056:	601a      	str	r2, [r3, #0]
    	return newID;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	e009      	b.n	8001070 <get_new_ID+0x34>
    }
    else{
    	newID = current_index_task;
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <get_new_ID+0x44>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	607b      	str	r3, [r7, #4]
		current_index_task++;
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <get_new_ID+0x44>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <get_new_ID+0x44>)
 800106c:	701a      	strb	r2, [r3, #0]
		return newID;
 800106e:	687b      	ldr	r3, [r7, #4]
    }
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	2000006c 	.word	0x2000006c
 8001080:	20000138 	.word	0x20000138

08001084 <SCH_Go_To_Sleep>:

void SCH_Go_To_Sleep(){
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	// Enter low-power mode (Sleep mode). The MCU will wake up on the next interrupt
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001088:	2101      	movs	r1, #1
 800108a:	2000      	movs	r0, #0
 800108c:	f000 ff1e 	bl	8001ecc <HAL_PWR_EnterSLEEPMode>
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <SCH_Init>:

void SCH_Init(void){
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
	head = NULL;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <SCH_Init+0x20>)
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
	current_index_task = 0;
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <SCH_Init+0x24>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
	deleted_ID = -1;
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <SCH_Init+0x28>)
 80010a6:	f04f 32ff 	mov.w	r2, #4294967295
 80010aa:	601a      	str	r2, [r3, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	20000134 	.word	0x20000134
 80010b8:	20000138 	.word	0x20000138
 80010bc:	2000006c 	.word	0x2000006c

080010c0 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (*p_function)(), uint32_t DELAY, uint32_t PERIOD){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
	sTask *newTask = (sTask*)malloc(sizeof(sTask));
 80010cc:	2018      	movs	r0, #24
 80010ce:	f003 f8db 	bl	8004288 <malloc>
 80010d2:	4603      	mov	r3, r0
 80010d4:	613b      	str	r3, [r7, #16]
    newTask->pTask = p_function;
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	601a      	str	r2, [r3, #0]
    newTask->Delay = DELAY;
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	605a      	str	r2, [r3, #4]
    newTask->Period = PERIOD;
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	609a      	str	r2, [r3, #8]
    newTask->RunMe = 0;
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	2200      	movs	r2, #0
 80010ec:	731a      	strb	r2, [r3, #12]
    newTask->TaskID = get_new_ID();
 80010ee:	f7ff ffa5 	bl	800103c <get_new_ID>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	611a      	str	r2, [r3, #16]
    newTask->next = NULL;
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]

    if(head == NULL){
 80010fe:	4b33      	ldr	r3, [pc, #204]	; (80011cc <SCH_Add_Task+0x10c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d109      	bne.n	800111a <SCH_Add_Task+0x5a>
    	newTask->next = head;
 8001106:	4b31      	ldr	r3, [pc, #196]	; (80011cc <SCH_Add_Task+0x10c>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	615a      	str	r2, [r3, #20]
        head = newTask;
 800110e:	4a2f      	ldr	r2, [pc, #188]	; (80011cc <SCH_Add_Task+0x10c>)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	6013      	str	r3, [r2, #0]
        return newTask->TaskID;
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	e053      	b.n	80011c2 <SCH_Add_Task+0x102>
    }

    uint32_t sumDelay = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    sTask *current = head;
 800111e:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <SCH_Add_Task+0x10c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	61bb      	str	r3, [r7, #24]
    sTask *prev = NULL;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
    while(current != NULL && (sumDelay + current->Delay) <= DELAY){
 8001128:	e009      	b.n	800113e <SCH_Add_Task+0x7e>
    	sumDelay += current->Delay;
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	69fa      	ldr	r2, [r7, #28]
 8001130:	4413      	add	r3, r2
 8001132:	61fb      	str	r3, [r7, #28]
    	prev = current;
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	617b      	str	r3, [r7, #20]
    	current = current->next;
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	61bb      	str	r3, [r7, #24]
    while(current != NULL && (sumDelay + current->Delay) <= DELAY){
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <SCH_Add_Task+0x92>
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	4413      	add	r3, r2
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	429a      	cmp	r2, r3
 8001150:	d2eb      	bcs.n	800112a <SCH_Add_Task+0x6a>
    }

    if (current != NULL){
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d026      	beq.n	80011a6 <SCH_Add_Task+0xe6>
        if (prev != NULL){
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d013      	beq.n	8001186 <SCH_Add_Task+0xc6>
        	newTask->Delay -= sumDelay;
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	1ad2      	subs	r2, r2, r3
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	605a      	str	r2, [r3, #4]
        	current->Delay -= newTask->Delay;
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	1ad2      	subs	r2, r2, r3
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	605a      	str	r2, [r3, #4]
        	newTask->next = current;
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	615a      	str	r2, [r3, #20]
            prev->next = newTask;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	615a      	str	r2, [r3, #20]
 8001184:	e01b      	b.n	80011be <SCH_Add_Task+0xfe>
        }
        else{
        	newTask->next = head;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <SCH_Add_Task+0x10c>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	615a      	str	r2, [r3, #20]
        	head = newTask;
 800118e:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <SCH_Add_Task+0x10c>)
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	6013      	str	r3, [r2, #0]
        	newTask->next->Delay -= DELAY;
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	6859      	ldr	r1, [r3, #4]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	1a8a      	subs	r2, r1, r2
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	e00b      	b.n	80011be <SCH_Add_Task+0xfe>
        }
    }
    else{
    	newTask->Delay -= sumDelay;
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	1ad2      	subs	r2, r2, r3
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	605a      	str	r2, [r3, #4]
    	newTask->next = current;
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	615a      	str	r2, [r3, #20]
    	prev->next = newTask;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	615a      	str	r2, [r3, #20]
    }
    return newTask->TaskID;
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	691b      	ldr	r3, [r3, #16]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000134 	.word	0x20000134

080011d0 <SCH_Update>:

void SCH_Update(void){
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
	if(head != NULL){
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <SCH_Update+0x44>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d016      	beq.n	800120a <SCH_Update+0x3a>
		if(head->Delay > 0){
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <SCH_Update+0x44>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d004      	beq.n	80011f0 <SCH_Update+0x20>
			head->Delay--;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <SCH_Update+0x44>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	3a01      	subs	r2, #1
 80011ee:	605a      	str	r2, [r3, #4]
		}
		if(head->Delay == 0){
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <SCH_Update+0x44>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d107      	bne.n	800120a <SCH_Update+0x3a>
			head->RunMe +=1;
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <SCH_Update+0x44>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	7b1a      	ldrb	r2, [r3, #12]
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <SCH_Update+0x44>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3201      	adds	r2, #1
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	731a      	strb	r2, [r3, #12]
		}
	}
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000134 	.word	0x20000134

08001218 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	if(head == NULL) return;
 800121c:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <SCH_Dispatch_Tasks+0x88>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d03b      	beq.n	800129c <SCH_Dispatch_Tasks+0x84>
	if(head->RunMe > 0){
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <SCH_Dispatch_Tasks+0x88>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	7b1b      	ldrb	r3, [r3, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d033      	beq.n	8001296 <SCH_Dispatch_Tasks+0x7e>
		(*head->pTask)();
 800122e:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <SCH_Dispatch_Tasks+0x88>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4798      	blx	r3
		head->RunMe--;
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <SCH_Dispatch_Tasks+0x88>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	7b1a      	ldrb	r2, [r3, #12]
 800123c:	3a01      	subs	r2, #1
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	731a      	strb	r2, [r3, #12]

		deleted_ID = head->TaskID;
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <SCH_Dispatch_Tasks+0x88>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	461a      	mov	r2, r3
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <SCH_Dispatch_Tasks+0x8c>)
 800124c:	601a      	str	r2, [r3, #0]
		if(head->Period > 0) {
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <SCH_Dispatch_Tasks+0x88>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00b      	beq.n	8001270 <SCH_Dispatch_Tasks+0x58>
			SCH_Add_Task(head->pTask, head->Period, head->Period);
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <SCH_Dispatch_Tasks+0x88>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6818      	ldr	r0, [r3, #0]
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <SCH_Dispatch_Tasks+0x88>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6899      	ldr	r1, [r3, #8]
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <SCH_Dispatch_Tasks+0x88>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	461a      	mov	r2, r3
 800126c:	f7ff ff28 	bl	80010c0 <SCH_Add_Task>
		}
		SCH_Delete_Task(head->TaskID);
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <SCH_Dispatch_Tasks+0x88>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f816 	bl	80012a8 <SCH_Delete_Task>

		if(head->Delay <= 0) head->RunMe += 1;
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <SCH_Dispatch_Tasks+0x88>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d107      	bne.n	8001296 <SCH_Dispatch_Tasks+0x7e>
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <SCH_Dispatch_Tasks+0x88>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	7b1a      	ldrb	r2, [r3, #12]
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <SCH_Dispatch_Tasks+0x88>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3201      	adds	r2, #1
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	731a      	strb	r2, [r3, #12]
	}
	SCH_Go_To_Sleep();
 8001296:	f7ff fef5 	bl	8001084 <SCH_Go_To_Sleep>
 800129a:	e000      	b.n	800129e <SCH_Dispatch_Tasks+0x86>
	if(head == NULL) return;
 800129c:	bf00      	nop
}
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000134 	.word	0x20000134
 80012a4:	2000006c 	.word	0x2000006c

080012a8 <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t TASK_ID){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

    sTask *current = head;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <SCH_Delete_Task+0x5c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60fb      	str	r3, [r7, #12]
    sTask *prev = NULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]

    while(current != NULL && current->TaskID != TASK_ID) {
 80012ba:	e004      	b.n	80012c6 <SCH_Delete_Task+0x1e>
        prev = current;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	60bb      	str	r3, [r7, #8]
        current = current->next;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	60fb      	str	r3, [r7, #12]
    while(current != NULL && current->TaskID != TASK_ID) {
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <SCH_Delete_Task+0x2e>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d1f2      	bne.n	80012bc <SCH_Delete_Task+0x14>
    }
    if (current != NULL){
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00e      	beq.n	80012fa <SCH_Delete_Task+0x52>
        if (prev != NULL){
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d004      	beq.n	80012ec <SCH_Delete_Task+0x44>
            prev->next = current->next;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	695a      	ldr	r2, [r3, #20]
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	615a      	str	r2, [r3, #20]
 80012ea:	e003      	b.n	80012f4 <SCH_Delete_Task+0x4c>
        }
        else{
            head = current->next;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	4a04      	ldr	r2, [pc, #16]	; (8001304 <SCH_Delete_Task+0x5c>)
 80012f2:	6013      	str	r3, [r2, #0]
        }
        free(current);
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f002 ffcf 	bl	8004298 <free>
    }
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000134 	.word	0x20000134

08001308 <setTimer>:
#define TICK 10

int timer_counter[10] = {0};
int timer_flag[10] = {0};

void setTimer(int duration, int index){
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
 	if(index >= 0 && index < 10){
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db12      	blt.n	800133e <setTimer+0x36>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	2b09      	cmp	r3, #9
 800131c:	dc0f      	bgt.n	800133e <setTimer+0x36>
		timer_counter[index] = duration / TICK;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a09      	ldr	r2, [pc, #36]	; (8001348 <setTimer+0x40>)
 8001322:	fb82 1203 	smull	r1, r2, r2, r3
 8001326:	1092      	asrs	r2, r2, #2
 8001328:	17db      	asrs	r3, r3, #31
 800132a:	1ad2      	subs	r2, r2, r3
 800132c:	4907      	ldr	r1, [pc, #28]	; (800134c <setTimer+0x44>)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		timer_flag[index] = 0;
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <setTimer+0x48>)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	2100      	movs	r1, #0
 800133a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	66666667 	.word	0x66666667
 800134c:	2000013c 	.word	0x2000013c
 8001350:	20000164 	.word	0x20000164

08001354 <timerRun>:

void timerRun(){
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
	for(int i = 0; i <= 5; i++){
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	e01c      	b.n	800139a <timerRun+0x46>
		if(timer_counter[i] > 0){
 8001360:	4a12      	ldr	r2, [pc, #72]	; (80013ac <timerRun+0x58>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001368:	2b00      	cmp	r3, #0
 800136a:	dd13      	ble.n	8001394 <timerRun+0x40>
			timer_counter[i]--;
 800136c:	4a0f      	ldr	r2, [pc, #60]	; (80013ac <timerRun+0x58>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001374:	1e5a      	subs	r2, r3, #1
 8001376:	490d      	ldr	r1, [pc, #52]	; (80013ac <timerRun+0x58>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 800137e:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <timerRun+0x58>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	2b00      	cmp	r3, #0
 8001388:	dc04      	bgt.n	8001394 <timerRun+0x40>
				timer_flag[i] = 1;
 800138a:	4a09      	ldr	r2, [pc, #36]	; (80013b0 <timerRun+0x5c>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2101      	movs	r1, #1
 8001390:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i <= 5; i++){
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3301      	adds	r3, #1
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b05      	cmp	r3, #5
 800139e:	dddf      	ble.n	8001360 <timerRun+0xc>
			}
		}
	}
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	2000013c 	.word	0x2000013c
 80013b0:	20000164 	.word	0x20000164

080013b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_MspInit+0x5c>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	4a14      	ldr	r2, [pc, #80]	; (8001410 <HAL_MspInit+0x5c>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6193      	str	r3, [r2, #24]
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_MspInit+0x5c>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_MspInit+0x5c>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <HAL_MspInit+0x5c>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	61d3      	str	r3, [r2, #28]
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_MspInit+0x5c>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_MspInit+0x60>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_MspInit+0x60>)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	40021000 	.word	0x40021000
 8001414:	40010000 	.word	0x40010000

08001418 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001428:	d114      	bne.n	8001454 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_TIM_Base_MspInit+0x78>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	4a18      	ldr	r2, [pc, #96]	; (8001490 <HAL_TIM_Base_MspInit+0x78>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	61d3      	str	r3, [r2, #28]
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <HAL_TIM_Base_MspInit+0x78>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	201c      	movs	r0, #28
 8001448:	f000 fa8b 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800144c:	201c      	movs	r0, #28
 800144e:	f000 faa4 	bl	800199a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001452:	e018      	b.n	8001486 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <HAL_TIM_Base_MspInit+0x7c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d113      	bne.n	8001486 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <HAL_TIM_Base_MspInit+0x78>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <HAL_TIM_Base_MspInit+0x78>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	61d3      	str	r3, [r2, #28]
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_TIM_Base_MspInit+0x78>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	201d      	movs	r0, #29
 800147c:	f000 fa71 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001480:	201d      	movs	r0, #29
 8001482:	f000 fa8a 	bl	800199a <HAL_NVIC_EnableIRQ>
}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40021000 	.word	0x40021000
 8001494:	40000400 	.word	0x40000400

08001498 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <HAL_TIM_MspPostInit+0x58>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d117      	bne.n	80014e8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <HAL_TIM_MspPostInit+0x5c>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <HAL_TIM_MspPostInit+0x5c>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <HAL_TIM_MspPostInit+0x5c>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014d0:	2340      	movs	r3, #64	; 0x40
 80014d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2302      	movs	r3, #2
 80014da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	4619      	mov	r1, r3
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <HAL_TIM_MspPostInit+0x60>)
 80014e4:	f000 fb26 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014e8:	bf00      	nop
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40000400 	.word	0x40000400
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40010800 	.word	0x40010800

080014fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a1f      	ldr	r2, [pc, #124]	; (8001594 <HAL_UART_MspInit+0x98>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d137      	bne.n	800158c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <HAL_UART_MspInit+0x9c>)
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	4a1d      	ldr	r2, [pc, #116]	; (8001598 <HAL_UART_MspInit+0x9c>)
 8001522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001526:	61d3      	str	r3, [r2, #28]
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <HAL_UART_MspInit+0x9c>)
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <HAL_UART_MspInit+0x9c>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a17      	ldr	r2, [pc, #92]	; (8001598 <HAL_UART_MspInit+0x9c>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <HAL_UART_MspInit+0x9c>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800154c:	2304      	movs	r3, #4
 800154e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001554:	2303      	movs	r3, #3
 8001556:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	4619      	mov	r1, r3
 800155e:	480f      	ldr	r0, [pc, #60]	; (800159c <HAL_UART_MspInit+0xa0>)
 8001560:	f000 fae8 	bl	8001b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001564:	2308      	movs	r3, #8
 8001566:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	4619      	mov	r1, r3
 8001576:	4809      	ldr	r0, [pc, #36]	; (800159c <HAL_UART_MspInit+0xa0>)
 8001578:	f000 fadc 	bl	8001b34 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	2026      	movs	r0, #38	; 0x26
 8001582:	f000 f9ee 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001586:	2026      	movs	r0, #38	; 0x26
 8001588:	f000 fa07 	bl	800199a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800158c:	bf00      	nop
 800158e:	3720      	adds	r7, #32
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40004400 	.word	0x40004400
 8001598:	40021000 	.word	0x40021000
 800159c:	40010800 	.word	0x40010800

080015a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <NMI_Handler+0x4>

080015a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <MemManage_Handler+0x4>

080015b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <UsageFault_Handler+0x4>

080015be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr

080015d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e6:	f000 f8c9 	bl	800177c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <TIM2_IRQHandler+0x10>)
 80015f6:	f001 fa2f 	bl	8002a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200001e0 	.word	0x200001e0

08001604 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <TIM3_IRQHandler+0x10>)
 800160a:	f001 fa25 	bl	8002a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000198 	.word	0x20000198

08001618 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <USART2_IRQHandler+0x10>)
 800161e:	f002 f8b9 	bl	8003794 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000228 	.word	0x20000228

0800162c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001634:	4a14      	ldr	r2, [pc, #80]	; (8001688 <_sbrk+0x5c>)
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <_sbrk+0x60>)
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <_sbrk+0x64>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <_sbrk+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d207      	bcs.n	800166c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800165c:	f002 fdea 	bl	8004234 <__errno>
 8001660:	4603      	mov	r3, r0
 8001662:	220c      	movs	r2, #12
 8001664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	e009      	b.n	8001680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <_sbrk+0x64>)
 800167c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20005000 	.word	0x20005000
 800168c:	00000400 	.word	0x00000400
 8001690:	2000018c 	.word	0x2000018c
 8001694:	200002b8 	.word	0x200002b8

08001698 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016a4:	f7ff fff8 	bl	8001698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a8:	480b      	ldr	r0, [pc, #44]	; (80016d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016aa:	490c      	ldr	r1, [pc, #48]	; (80016dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016ac:	4a0c      	ldr	r2, [pc, #48]	; (80016e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b0:	e002      	b.n	80016b8 <LoopCopyDataInit>

080016b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b6:	3304      	adds	r3, #4

080016b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016bc:	d3f9      	bcc.n	80016b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016be:	4a09      	ldr	r2, [pc, #36]	; (80016e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016c0:	4c09      	ldr	r4, [pc, #36]	; (80016e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c4:	e001      	b.n	80016ca <LoopFillZerobss>

080016c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c8:	3204      	adds	r2, #4

080016ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016cc:	d3fb      	bcc.n	80016c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ce:	f002 fdb7 	bl	8004240 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016d2:	f7ff faab 	bl	8000c2c <main>
  bx lr
 80016d6:	4770      	bx	lr
  ldr r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016dc:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80016e0:	08004bcc 	.word	0x08004bcc
  ldr r2, =_sbss
 80016e4:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80016e8:	200002b8 	.word	0x200002b8

080016ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC1_2_IRQHandler>
	...

080016f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <HAL_Init+0x28>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a07      	ldr	r2, [pc, #28]	; (8001718 <HAL_Init+0x28>)
 80016fa:	f043 0310 	orr.w	r3, r3, #16
 80016fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001700:	2003      	movs	r0, #3
 8001702:	f000 f923 	bl	800194c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001706:	200f      	movs	r0, #15
 8001708:	f000 f808 	bl	800171c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800170c:	f7ff fe52 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40022000 	.word	0x40022000

0800171c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_InitTick+0x54>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_InitTick+0x58>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f93b 	bl	80019b6 <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e00e      	b.n	8001768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b0f      	cmp	r3, #15
 800174e:	d80a      	bhi.n	8001766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001750:	2200      	movs	r2, #0
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f000 f903 	bl	8001962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800175c:	4a06      	ldr	r2, [pc, #24]	; (8001778 <HAL_InitTick+0x5c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	e000      	b.n	8001768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000070 	.word	0x20000070
 8001774:	20000078 	.word	0x20000078
 8001778:	20000074 	.word	0x20000074

0800177c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_IncTick+0x1c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b05      	ldr	r3, [pc, #20]	; (800179c <HAL_IncTick+0x20>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a03      	ldr	r2, [pc, #12]	; (800179c <HAL_IncTick+0x20>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	20000078 	.word	0x20000078
 800179c:	200002a4 	.word	0x200002a4

080017a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;
 80017a4:	4b02      	ldr	r3, [pc, #8]	; (80017b0 <HAL_GetTick+0x10>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	200002a4 	.word	0x200002a4

080017b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d0:	4013      	ands	r3, r2
 80017d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e6:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	60d3      	str	r3, [r2, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <__NVIC_GetPriorityGrouping+0x18>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	f003 0307 	and.w	r3, r3, #7
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	2b00      	cmp	r3, #0
 8001828:	db0b      	blt.n	8001842 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	f003 021f 	and.w	r2, r3, #31
 8001830:	4906      	ldr	r1, [pc, #24]	; (800184c <__NVIC_EnableIRQ+0x34>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	095b      	lsrs	r3, r3, #5
 8001838:	2001      	movs	r0, #1
 800183a:	fa00 f202 	lsl.w	r2, r0, r2
 800183e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100

08001850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db0a      	blt.n	800187a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	490c      	ldr	r1, [pc, #48]	; (800189c <__NVIC_SetPriority+0x4c>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	440b      	add	r3, r1
 8001874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001878:	e00a      	b.n	8001890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4908      	ldr	r1, [pc, #32]	; (80018a0 <__NVIC_SetPriority+0x50>)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3b04      	subs	r3, #4
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	440b      	add	r3, r1
 800188e:	761a      	strb	r2, [r3, #24]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000e100 	.word	0xe000e100
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	; 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f1c3 0307 	rsb	r3, r3, #7
 80018be:	2b04      	cmp	r3, #4
 80018c0:	bf28      	it	cs
 80018c2:	2304      	movcs	r3, #4
 80018c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3304      	adds	r3, #4
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d902      	bls.n	80018d4 <NVIC_EncodePriority+0x30>
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3b03      	subs	r3, #3
 80018d2:	e000      	b.n	80018d6 <NVIC_EncodePriority+0x32>
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	401a      	ands	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	43d9      	mvns	r1, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	4313      	orrs	r3, r2
         );
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3724      	adds	r7, #36	; 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001918:	d301      	bcc.n	800191e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191a:	2301      	movs	r3, #1
 800191c:	e00f      	b.n	800193e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <SysTick_Config+0x40>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001926:	210f      	movs	r1, #15
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f7ff ff90 	bl	8001850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <SysTick_Config+0x40>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <SysTick_Config+0x40>)
 8001938:	2207      	movs	r2, #7
 800193a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e000e010 	.word	0xe000e010

0800194c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ff2d 	bl	80017b4 <__NVIC_SetPriorityGrouping>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001974:	f7ff ff42 	bl	80017fc <__NVIC_GetPriorityGrouping>
 8001978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	f7ff ff90 	bl	80018a4 <NVIC_EncodePriority>
 8001984:	4602      	mov	r2, r0
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff5f 	bl	8001850 <__NVIC_SetPriority>
}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff35 	bl	8001818 <__NVIC_EnableIRQ>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ffa2 	bl	8001908 <SysTick_Config>
 80019c4:	4603      	mov	r3, r0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b085      	sub	sp, #20
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d008      	beq.n	80019f8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2204      	movs	r2, #4
 80019ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e020      	b.n	8001a3a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 020e 	bic.w	r2, r2, #14
 8001a06:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0201 	bic.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a20:	2101      	movs	r1, #1
 8001a22:	fa01 f202 	lsl.w	r2, r1, r2
 8001a26:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d005      	beq.n	8001a68 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2204      	movs	r2, #4
 8001a60:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
 8001a66:	e051      	b.n	8001b0c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 020e 	bic.w	r2, r2, #14
 8001a76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0201 	bic.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a22      	ldr	r2, [pc, #136]	; (8001b18 <HAL_DMA_Abort_IT+0xd4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d029      	beq.n	8001ae6 <HAL_DMA_Abort_IT+0xa2>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a21      	ldr	r2, [pc, #132]	; (8001b1c <HAL_DMA_Abort_IT+0xd8>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d022      	beq.n	8001ae2 <HAL_DMA_Abort_IT+0x9e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <HAL_DMA_Abort_IT+0xdc>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d01a      	beq.n	8001adc <HAL_DMA_Abort_IT+0x98>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a1e      	ldr	r2, [pc, #120]	; (8001b24 <HAL_DMA_Abort_IT+0xe0>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d012      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x92>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a1c      	ldr	r2, [pc, #112]	; (8001b28 <HAL_DMA_Abort_IT+0xe4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d00a      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0x8c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a1b      	ldr	r2, [pc, #108]	; (8001b2c <HAL_DMA_Abort_IT+0xe8>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d102      	bne.n	8001aca <HAL_DMA_Abort_IT+0x86>
 8001ac4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ac8:	e00e      	b.n	8001ae8 <HAL_DMA_Abort_IT+0xa4>
 8001aca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ace:	e00b      	b.n	8001ae8 <HAL_DMA_Abort_IT+0xa4>
 8001ad0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad4:	e008      	b.n	8001ae8 <HAL_DMA_Abort_IT+0xa4>
 8001ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ada:	e005      	b.n	8001ae8 <HAL_DMA_Abort_IT+0xa4>
 8001adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae0:	e002      	b.n	8001ae8 <HAL_DMA_Abort_IT+0xa4>
 8001ae2:	2310      	movs	r3, #16
 8001ae4:	e000      	b.n	8001ae8 <HAL_DMA_Abort_IT+0xa4>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	4a11      	ldr	r2, [pc, #68]	; (8001b30 <HAL_DMA_Abort_IT+0xec>)
 8001aea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	4798      	blx	r3
    } 
  }
  return status;
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40020008 	.word	0x40020008
 8001b1c:	4002001c 	.word	0x4002001c
 8001b20:	40020030 	.word	0x40020030
 8001b24:	40020044 	.word	0x40020044
 8001b28:	40020058 	.word	0x40020058
 8001b2c:	4002006c 	.word	0x4002006c
 8001b30:	40020000 	.word	0x40020000

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b08b      	sub	sp, #44	; 0x2c
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b46:	e169      	b.n	8001e1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	f040 8158 	bne.w	8001e16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4a9a      	ldr	r2, [pc, #616]	; (8001dd4 <HAL_GPIO_Init+0x2a0>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d05e      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
 8001b70:	4a98      	ldr	r2, [pc, #608]	; (8001dd4 <HAL_GPIO_Init+0x2a0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d875      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001b76:	4a98      	ldr	r2, [pc, #608]	; (8001dd8 <HAL_GPIO_Init+0x2a4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d058      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
 8001b7c:	4a96      	ldr	r2, [pc, #600]	; (8001dd8 <HAL_GPIO_Init+0x2a4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d86f      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001b82:	4a96      	ldr	r2, [pc, #600]	; (8001ddc <HAL_GPIO_Init+0x2a8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d052      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
 8001b88:	4a94      	ldr	r2, [pc, #592]	; (8001ddc <HAL_GPIO_Init+0x2a8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d869      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001b8e:	4a94      	ldr	r2, [pc, #592]	; (8001de0 <HAL_GPIO_Init+0x2ac>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d04c      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
 8001b94:	4a92      	ldr	r2, [pc, #584]	; (8001de0 <HAL_GPIO_Init+0x2ac>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d863      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001b9a:	4a92      	ldr	r2, [pc, #584]	; (8001de4 <HAL_GPIO_Init+0x2b0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d046      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
 8001ba0:	4a90      	ldr	r2, [pc, #576]	; (8001de4 <HAL_GPIO_Init+0x2b0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d85d      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001ba6:	2b12      	cmp	r3, #18
 8001ba8:	d82a      	bhi.n	8001c00 <HAL_GPIO_Init+0xcc>
 8001baa:	2b12      	cmp	r3, #18
 8001bac:	d859      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001bae:	a201      	add	r2, pc, #4	; (adr r2, 8001bb4 <HAL_GPIO_Init+0x80>)
 8001bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb4:	08001c2f 	.word	0x08001c2f
 8001bb8:	08001c09 	.word	0x08001c09
 8001bbc:	08001c1b 	.word	0x08001c1b
 8001bc0:	08001c5d 	.word	0x08001c5d
 8001bc4:	08001c63 	.word	0x08001c63
 8001bc8:	08001c63 	.word	0x08001c63
 8001bcc:	08001c63 	.word	0x08001c63
 8001bd0:	08001c63 	.word	0x08001c63
 8001bd4:	08001c63 	.word	0x08001c63
 8001bd8:	08001c63 	.word	0x08001c63
 8001bdc:	08001c63 	.word	0x08001c63
 8001be0:	08001c63 	.word	0x08001c63
 8001be4:	08001c63 	.word	0x08001c63
 8001be8:	08001c63 	.word	0x08001c63
 8001bec:	08001c63 	.word	0x08001c63
 8001bf0:	08001c63 	.word	0x08001c63
 8001bf4:	08001c63 	.word	0x08001c63
 8001bf8:	08001c11 	.word	0x08001c11
 8001bfc:	08001c25 	.word	0x08001c25
 8001c00:	4a79      	ldr	r2, [pc, #484]	; (8001de8 <HAL_GPIO_Init+0x2b4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c06:	e02c      	b.n	8001c62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	623b      	str	r3, [r7, #32]
          break;
 8001c0e:	e029      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	3304      	adds	r3, #4
 8001c16:	623b      	str	r3, [r7, #32]
          break;
 8001c18:	e024      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	3308      	adds	r3, #8
 8001c20:	623b      	str	r3, [r7, #32]
          break;
 8001c22:	e01f      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	330c      	adds	r3, #12
 8001c2a:	623b      	str	r3, [r7, #32]
          break;
 8001c2c:	e01a      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d102      	bne.n	8001c3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c36:	2304      	movs	r3, #4
 8001c38:	623b      	str	r3, [r7, #32]
          break;
 8001c3a:	e013      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d105      	bne.n	8001c50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c44:	2308      	movs	r3, #8
 8001c46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	611a      	str	r2, [r3, #16]
          break;
 8001c4e:	e009      	b.n	8001c64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c50:	2308      	movs	r3, #8
 8001c52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	615a      	str	r2, [r3, #20]
          break;
 8001c5a:	e003      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
          break;
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          break;
 8001c62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2bff      	cmp	r3, #255	; 0xff
 8001c68:	d801      	bhi.n	8001c6e <HAL_GPIO_Init+0x13a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	e001      	b.n	8001c72 <HAL_GPIO_Init+0x13e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3304      	adds	r3, #4
 8001c72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2bff      	cmp	r3, #255	; 0xff
 8001c78:	d802      	bhi.n	8001c80 <HAL_GPIO_Init+0x14c>
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	e002      	b.n	8001c86 <HAL_GPIO_Init+0x152>
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	3b08      	subs	r3, #8
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	210f      	movs	r1, #15
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	fa01 f303 	lsl.w	r3, r1, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	401a      	ands	r2, r3
 8001c98:	6a39      	ldr	r1, [r7, #32]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 80b1 	beq.w	8001e16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cb4:	4b4d      	ldr	r3, [pc, #308]	; (8001dec <HAL_GPIO_Init+0x2b8>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	4a4c      	ldr	r2, [pc, #304]	; (8001dec <HAL_GPIO_Init+0x2b8>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6193      	str	r3, [r2, #24]
 8001cc0:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <HAL_GPIO_Init+0x2b8>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ccc:	4a48      	ldr	r2, [pc, #288]	; (8001df0 <HAL_GPIO_Init+0x2bc>)
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	220f      	movs	r2, #15
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	4013      	ands	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a40      	ldr	r2, [pc, #256]	; (8001df4 <HAL_GPIO_Init+0x2c0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d013      	beq.n	8001d20 <HAL_GPIO_Init+0x1ec>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a3f      	ldr	r2, [pc, #252]	; (8001df8 <HAL_GPIO_Init+0x2c4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d00d      	beq.n	8001d1c <HAL_GPIO_Init+0x1e8>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a3e      	ldr	r2, [pc, #248]	; (8001dfc <HAL_GPIO_Init+0x2c8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d007      	beq.n	8001d18 <HAL_GPIO_Init+0x1e4>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a3d      	ldr	r2, [pc, #244]	; (8001e00 <HAL_GPIO_Init+0x2cc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d101      	bne.n	8001d14 <HAL_GPIO_Init+0x1e0>
 8001d10:	2303      	movs	r3, #3
 8001d12:	e006      	b.n	8001d22 <HAL_GPIO_Init+0x1ee>
 8001d14:	2304      	movs	r3, #4
 8001d16:	e004      	b.n	8001d22 <HAL_GPIO_Init+0x1ee>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e002      	b.n	8001d22 <HAL_GPIO_Init+0x1ee>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <HAL_GPIO_Init+0x1ee>
 8001d20:	2300      	movs	r3, #0
 8001d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d24:	f002 0203 	and.w	r2, r2, #3
 8001d28:	0092      	lsls	r2, r2, #2
 8001d2a:	4093      	lsls	r3, r2
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d32:	492f      	ldr	r1, [pc, #188]	; (8001df0 <HAL_GPIO_Init+0x2bc>)
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	3302      	adds	r3, #2
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d006      	beq.n	8001d5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d4c:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	492c      	ldr	r1, [pc, #176]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	608b      	str	r3, [r1, #8]
 8001d58:	e006      	b.n	8001d68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	4928      	ldr	r1, [pc, #160]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d006      	beq.n	8001d82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d74:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	4922      	ldr	r1, [pc, #136]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60cb      	str	r3, [r1, #12]
 8001d80:	e006      	b.n	8001d90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d82:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	491e      	ldr	r1, [pc, #120]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d006      	beq.n	8001daa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	4918      	ldr	r1, [pc, #96]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
 8001da8:	e006      	b.n	8001db8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	4914      	ldr	r1, [pc, #80]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d021      	beq.n	8001e08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	490e      	ldr	r1, [pc, #56]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	600b      	str	r3, [r1, #0]
 8001dd0:	e021      	b.n	8001e16 <HAL_GPIO_Init+0x2e2>
 8001dd2:	bf00      	nop
 8001dd4:	10320000 	.word	0x10320000
 8001dd8:	10310000 	.word	0x10310000
 8001ddc:	10220000 	.word	0x10220000
 8001de0:	10210000 	.word	0x10210000
 8001de4:	10120000 	.word	0x10120000
 8001de8:	10110000 	.word	0x10110000
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40010000 	.word	0x40010000
 8001df4:	40010800 	.word	0x40010800
 8001df8:	40010c00 	.word	0x40010c00
 8001dfc:	40011000 	.word	0x40011000
 8001e00:	40011400 	.word	0x40011400
 8001e04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	4909      	ldr	r1, [pc, #36]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	3301      	adds	r3, #1
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	fa22 f303 	lsr.w	r3, r2, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f47f ae8e 	bne.w	8001b48 <HAL_GPIO_Init+0x14>
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	372c      	adds	r7, #44	; 0x2c
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	40010400 	.word	0x40010400

08001e3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	887b      	ldrh	r3, [r7, #2]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
 8001e58:	e001      	b.n	8001e5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	460b      	mov	r3, r1
 8001e74:	807b      	strh	r3, [r7, #2]
 8001e76:	4613      	mov	r3, r2
 8001e78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e7a:	787b      	ldrb	r3, [r7, #1]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e80:	887a      	ldrh	r2, [r7, #2]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e86:	e003      	b.n	8001e90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e88:	887b      	ldrh	r3, [r7, #2]
 8001e8a:	041a      	lsls	r2, r3, #16
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	611a      	str	r2, [r3, #16]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b085      	sub	sp, #20
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eac:	887a      	ldrh	r2, [r7, #2]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	041a      	lsls	r2, r3, #16
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43d9      	mvns	r1, r3
 8001eb8:	887b      	ldrh	r3, [r7, #2]
 8001eba:	400b      	ands	r3, r1
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	611a      	str	r2, [r3, #16]
}
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	4a08      	ldr	r2, [pc, #32]	; (8001f00 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001ede:	f023 0304 	bic.w	r3, r3, #4
 8001ee2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001eea:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001eec:	e002      	b.n	8001ef4 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8001eee:	bf40      	sev
    __WFE();
 8001ef0:	bf20      	wfe
    __WFE();
 8001ef2:	bf20      	wfe
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e26c      	b.n	80023f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8087 	beq.w	8002032 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f24:	4b92      	ldr	r3, [pc, #584]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d00c      	beq.n	8001f4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f30:	4b8f      	ldr	r3, [pc, #572]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 030c 	and.w	r3, r3, #12
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d112      	bne.n	8001f62 <HAL_RCC_OscConfig+0x5e>
 8001f3c:	4b8c      	ldr	r3, [pc, #560]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f48:	d10b      	bne.n	8001f62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4a:	4b89      	ldr	r3, [pc, #548]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d06c      	beq.n	8002030 <HAL_RCC_OscConfig+0x12c>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d168      	bne.n	8002030 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e246      	b.n	80023f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6a:	d106      	bne.n	8001f7a <HAL_RCC_OscConfig+0x76>
 8001f6c:	4b80      	ldr	r3, [pc, #512]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a7f      	ldr	r2, [pc, #508]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	e02e      	b.n	8001fd8 <HAL_RCC_OscConfig+0xd4>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x98>
 8001f82:	4b7b      	ldr	r3, [pc, #492]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a7a      	ldr	r2, [pc, #488]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	4b78      	ldr	r3, [pc, #480]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a77      	ldr	r2, [pc, #476]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e01d      	b.n	8001fd8 <HAL_RCC_OscConfig+0xd4>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0xbc>
 8001fa6:	4b72      	ldr	r3, [pc, #456]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a71      	ldr	r2, [pc, #452]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	4b6f      	ldr	r3, [pc, #444]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a6e      	ldr	r2, [pc, #440]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e00b      	b.n	8001fd8 <HAL_RCC_OscConfig+0xd4>
 8001fc0:	4b6b      	ldr	r3, [pc, #428]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a6a      	ldr	r2, [pc, #424]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	4b68      	ldr	r3, [pc, #416]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a67      	ldr	r2, [pc, #412]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d013      	beq.n	8002008 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7ff fbde 	bl	80017a0 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff fbda 	bl	80017a0 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1fa      	b.n	80023f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffa:	4b5d      	ldr	r3, [pc, #372]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0xe4>
 8002006:	e014      	b.n	8002032 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff fbca 	bl	80017a0 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002010:	f7ff fbc6 	bl	80017a0 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	; 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e1e6      	b.n	80023f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	4b53      	ldr	r3, [pc, #332]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x10c>
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d063      	beq.n	8002106 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800203e:	4b4c      	ldr	r3, [pc, #304]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00b      	beq.n	8002062 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800204a:	4b49      	ldr	r3, [pc, #292]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	2b08      	cmp	r3, #8
 8002054:	d11c      	bne.n	8002090 <HAL_RCC_OscConfig+0x18c>
 8002056:	4b46      	ldr	r3, [pc, #280]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d116      	bne.n	8002090 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002062:	4b43      	ldr	r3, [pc, #268]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <HAL_RCC_OscConfig+0x176>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d001      	beq.n	800207a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e1ba      	b.n	80023f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207a:	4b3d      	ldr	r3, [pc, #244]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4939      	ldr	r1, [pc, #228]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208e:	e03a      	b.n	8002106 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d020      	beq.n	80020da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002098:	4b36      	ldr	r3, [pc, #216]	; (8002174 <HAL_RCC_OscConfig+0x270>)
 800209a:	2201      	movs	r2, #1
 800209c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209e:	f7ff fb7f 	bl	80017a0 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a6:	f7ff fb7b 	bl	80017a0 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e19b      	b.n	80023f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b8:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c4:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4927      	ldr	r1, [pc, #156]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]
 80020d8:	e015      	b.n	8002106 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020da:	4b26      	ldr	r3, [pc, #152]	; (8002174 <HAL_RCC_OscConfig+0x270>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff fb5e 	bl	80017a0 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e8:	f7ff fb5a 	bl	80017a0 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e17a      	b.n	80023f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fa:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d03a      	beq.n	8002188 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d019      	beq.n	800214e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800211a:	4b17      	ldr	r3, [pc, #92]	; (8002178 <HAL_RCC_OscConfig+0x274>)
 800211c:	2201      	movs	r2, #1
 800211e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002120:	f7ff fb3e 	bl	80017a0 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002128:	f7ff fb3a 	bl	80017a0 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e15a      	b.n	80023f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213a:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <HAL_RCC_OscConfig+0x26c>)
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002146:	2001      	movs	r0, #1
 8002148:	f000 facc 	bl	80026e4 <RCC_Delay>
 800214c:	e01c      	b.n	8002188 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_RCC_OscConfig+0x274>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002154:	f7ff fb24 	bl	80017a0 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215a:	e00f      	b.n	800217c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215c:	f7ff fb20 	bl	80017a0 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d908      	bls.n	800217c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e140      	b.n	80023f0 <HAL_RCC_OscConfig+0x4ec>
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	42420000 	.word	0x42420000
 8002178:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800217c:	4b9e      	ldr	r3, [pc, #632]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1e9      	bne.n	800215c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 80a6 	beq.w	80022e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219a:	4b97      	ldr	r3, [pc, #604]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10d      	bne.n	80021c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	4b94      	ldr	r3, [pc, #592]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	4a93      	ldr	r2, [pc, #588]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b0:	61d3      	str	r3, [r2, #28]
 80021b2:	4b91      	ldr	r3, [pc, #580]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021be:	2301      	movs	r3, #1
 80021c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c2:	4b8e      	ldr	r3, [pc, #568]	; (80023fc <HAL_RCC_OscConfig+0x4f8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d118      	bne.n	8002200 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ce:	4b8b      	ldr	r3, [pc, #556]	; (80023fc <HAL_RCC_OscConfig+0x4f8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a8a      	ldr	r2, [pc, #552]	; (80023fc <HAL_RCC_OscConfig+0x4f8>)
 80021d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021da:	f7ff fae1 	bl	80017a0 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e2:	f7ff fadd 	bl	80017a0 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b64      	cmp	r3, #100	; 0x64
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e0fd      	b.n	80023f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f4:	4b81      	ldr	r3, [pc, #516]	; (80023fc <HAL_RCC_OscConfig+0x4f8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d106      	bne.n	8002216 <HAL_RCC_OscConfig+0x312>
 8002208:	4b7b      	ldr	r3, [pc, #492]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4a7a      	ldr	r2, [pc, #488]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6213      	str	r3, [r2, #32]
 8002214:	e02d      	b.n	8002272 <HAL_RCC_OscConfig+0x36e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0x334>
 800221e:	4b76      	ldr	r3, [pc, #472]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4a75      	ldr	r2, [pc, #468]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	6213      	str	r3, [r2, #32]
 800222a:	4b73      	ldr	r3, [pc, #460]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	4a72      	ldr	r2, [pc, #456]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 8002230:	f023 0304 	bic.w	r3, r3, #4
 8002234:	6213      	str	r3, [r2, #32]
 8002236:	e01c      	b.n	8002272 <HAL_RCC_OscConfig+0x36e>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2b05      	cmp	r3, #5
 800223e:	d10c      	bne.n	800225a <HAL_RCC_OscConfig+0x356>
 8002240:	4b6d      	ldr	r3, [pc, #436]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4a6c      	ldr	r2, [pc, #432]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 8002246:	f043 0304 	orr.w	r3, r3, #4
 800224a:	6213      	str	r3, [r2, #32]
 800224c:	4b6a      	ldr	r3, [pc, #424]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	4a69      	ldr	r2, [pc, #420]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6213      	str	r3, [r2, #32]
 8002258:	e00b      	b.n	8002272 <HAL_RCC_OscConfig+0x36e>
 800225a:	4b67      	ldr	r3, [pc, #412]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4a66      	ldr	r2, [pc, #408]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	6213      	str	r3, [r2, #32]
 8002266:	4b64      	ldr	r3, [pc, #400]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	4a63      	ldr	r2, [pc, #396]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 800226c:	f023 0304 	bic.w	r3, r3, #4
 8002270:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d015      	beq.n	80022a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227a:	f7ff fa91 	bl	80017a0 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002280:	e00a      	b.n	8002298 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7ff fa8d 	bl	80017a0 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002290:	4293      	cmp	r3, r2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e0ab      	b.n	80023f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002298:	4b57      	ldr	r3, [pc, #348]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0ee      	beq.n	8002282 <HAL_RCC_OscConfig+0x37e>
 80022a4:	e014      	b.n	80022d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a6:	f7ff fa7b 	bl	80017a0 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ac:	e00a      	b.n	80022c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ae:	f7ff fa77 	bl	80017a0 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022bc:	4293      	cmp	r3, r2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e095      	b.n	80023f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c4:	4b4c      	ldr	r3, [pc, #304]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1ee      	bne.n	80022ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022d0:	7dfb      	ldrb	r3, [r7, #23]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d105      	bne.n	80022e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d6:	4b48      	ldr	r3, [pc, #288]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	4a47      	ldr	r2, [pc, #284]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 80022dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 8081 	beq.w	80023ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ec:	4b42      	ldr	r3, [pc, #264]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d061      	beq.n	80023bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d146      	bne.n	800238e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002300:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <HAL_RCC_OscConfig+0x4fc>)
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002306:	f7ff fa4b 	bl	80017a0 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230e:	f7ff fa47 	bl	80017a0 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e067      	b.n	80023f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002320:	4b35      	ldr	r3, [pc, #212]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f0      	bne.n	800230e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002334:	d108      	bne.n	8002348 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002336:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	492d      	ldr	r1, [pc, #180]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002348:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a19      	ldr	r1, [r3, #32]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	430b      	orrs	r3, r1
 800235a:	4927      	ldr	r1, [pc, #156]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 800235c:	4313      	orrs	r3, r2
 800235e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002360:	4b27      	ldr	r3, [pc, #156]	; (8002400 <HAL_RCC_OscConfig+0x4fc>)
 8002362:	2201      	movs	r2, #1
 8002364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002366:	f7ff fa1b 	bl	80017a0 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236e:	f7ff fa17 	bl	80017a0 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e037      	b.n	80023f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002380:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x46a>
 800238c:	e02f      	b.n	80023ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238e:	4b1c      	ldr	r3, [pc, #112]	; (8002400 <HAL_RCC_OscConfig+0x4fc>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7ff fa04 	bl	80017a0 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239c:	f7ff fa00 	bl	80017a0 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e020      	b.n	80023f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ae:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x498>
 80023ba:	e018      	b.n	80023ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e013      	b.n	80023f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d106      	bne.n	80023ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40007000 	.word	0x40007000
 8002400:	42420060 	.word	0x42420060

08002404 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0d0      	b.n	80025ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002418:	4b6a      	ldr	r3, [pc, #424]	; (80025c4 <HAL_RCC_ClockConfig+0x1c0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d910      	bls.n	8002448 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002426:	4b67      	ldr	r3, [pc, #412]	; (80025c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 0207 	bic.w	r2, r3, #7
 800242e:	4965      	ldr	r1, [pc, #404]	; (80025c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4313      	orrs	r3, r2
 8002434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b63      	ldr	r3, [pc, #396]	; (80025c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0b8      	b.n	80025ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002460:	4b59      	ldr	r3, [pc, #356]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a58      	ldr	r2, [pc, #352]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800246a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002478:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	4a52      	ldr	r2, [pc, #328]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 800247e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002482:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002484:	4b50      	ldr	r3, [pc, #320]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	494d      	ldr	r1, [pc, #308]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	4313      	orrs	r3, r2
 8002494:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d040      	beq.n	8002524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d107      	bne.n	80024ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d115      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e07f      	b.n	80025ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d107      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c2:	4b41      	ldr	r3, [pc, #260]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e073      	b.n	80025ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d2:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e06b      	b.n	80025ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e2:	4b39      	ldr	r3, [pc, #228]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f023 0203 	bic.w	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4936      	ldr	r1, [pc, #216]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f4:	f7ff f954 	bl	80017a0 <HAL_GetTick>
 80024f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fa:	e00a      	b.n	8002512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fc:	f7ff f950 	bl	80017a0 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	; 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e053      	b.n	80025ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	4b2d      	ldr	r3, [pc, #180]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 020c 	and.w	r2, r3, #12
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	429a      	cmp	r2, r3
 8002522:	d1eb      	bne.n	80024fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002524:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d210      	bcs.n	8002554 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 0207 	bic.w	r2, r3, #7
 800253a:	4922      	ldr	r1, [pc, #136]	; (80025c4 <HAL_RCC_ClockConfig+0x1c0>)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e032      	b.n	80025ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002560:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4916      	ldr	r1, [pc, #88]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800257e:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	490e      	ldr	r1, [pc, #56]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	4313      	orrs	r3, r2
 8002590:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002592:	f000 f821 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8002596:	4602      	mov	r2, r0
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	490a      	ldr	r1, [pc, #40]	; (80025cc <HAL_RCC_ClockConfig+0x1c8>)
 80025a4:	5ccb      	ldrb	r3, [r1, r3]
 80025a6:	fa22 f303 	lsr.w	r3, r2, r3
 80025aa:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <HAL_RCC_ClockConfig+0x1cc>)
 80025ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <HAL_RCC_ClockConfig+0x1d0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff f8b2 	bl	800171c <HAL_InitTick>

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40022000 	.word	0x40022000
 80025c8:	40021000 	.word	0x40021000
 80025cc:	08004b64 	.word	0x08004b64
 80025d0:	20000070 	.word	0x20000070
 80025d4:	20000074 	.word	0x20000074

080025d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	2300      	movs	r3, #0
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	2300      	movs	r3, #0
 80025ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025f2:	4b1e      	ldr	r3, [pc, #120]	; (800266c <HAL_RCC_GetSysClockFreq+0x94>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d002      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0x30>
 8002602:	2b08      	cmp	r3, #8
 8002604:	d003      	beq.n	800260e <HAL_RCC_GetSysClockFreq+0x36>
 8002606:	e027      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <HAL_RCC_GetSysClockFreq+0x98>)
 800260a:	613b      	str	r3, [r7, #16]
      break;
 800260c:	e027      	b.n	800265e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	0c9b      	lsrs	r3, r3, #18
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	4a17      	ldr	r2, [pc, #92]	; (8002674 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002618:	5cd3      	ldrb	r3, [r2, r3]
 800261a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d010      	beq.n	8002648 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <HAL_RCC_GetSysClockFreq+0x94>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	0c5b      	lsrs	r3, r3, #17
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	4a11      	ldr	r2, [pc, #68]	; (8002678 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002632:	5cd3      	ldrb	r3, [r2, r3]
 8002634:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <HAL_RCC_GetSysClockFreq+0x98>)
 800263a:	fb02 f203 	mul.w	r2, r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	fbb2 f3f3 	udiv	r3, r2, r3
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	e004      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a0c      	ldr	r2, [pc, #48]	; (800267c <HAL_RCC_GetSysClockFreq+0xa4>)
 800264c:	fb02 f303 	mul.w	r3, r2, r3
 8002650:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	613b      	str	r3, [r7, #16]
      break;
 8002656:	e002      	b.n	800265e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <HAL_RCC_GetSysClockFreq+0x98>)
 800265a:	613b      	str	r3, [r7, #16]
      break;
 800265c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800265e:	693b      	ldr	r3, [r7, #16]
}
 8002660:	4618      	mov	r0, r3
 8002662:	371c      	adds	r7, #28
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	007a1200 	.word	0x007a1200
 8002674:	08004b7c 	.word	0x08004b7c
 8002678:	08004b8c 	.word	0x08004b8c
 800267c:	003d0900 	.word	0x003d0900

08002680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002684:	4b02      	ldr	r3, [pc, #8]	; (8002690 <HAL_RCC_GetHCLKFreq+0x10>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	20000070 	.word	0x20000070

08002694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002698:	f7ff fff2 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4903      	ldr	r1, [pc, #12]	; (80026b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000
 80026b8:	08004b74 	.word	0x08004b74

080026bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026c0:	f7ff ffde 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026c4:	4602      	mov	r2, r0
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	0adb      	lsrs	r3, r3, #11
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	4903      	ldr	r1, [pc, #12]	; (80026e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d2:	5ccb      	ldrb	r3, [r1, r3]
 80026d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d8:	4618      	mov	r0, r3
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021000 	.word	0x40021000
 80026e0:	08004b74 	.word	0x08004b74

080026e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <RCC_Delay+0x34>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a0a      	ldr	r2, [pc, #40]	; (800271c <RCC_Delay+0x38>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0a5b      	lsrs	r3, r3, #9
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002700:	bf00      	nop
  }
  while (Delay --);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1e5a      	subs	r2, r3, #1
 8002706:	60fa      	str	r2, [r7, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f9      	bne.n	8002700 <RCC_Delay+0x1c>
}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	20000070 	.word	0x20000070
 800271c:	10624dd3 	.word	0x10624dd3

08002720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e041      	b.n	80027b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe fe66 	bl	8001418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3304      	adds	r3, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4610      	mov	r0, r2
 8002760:	f000 fc30 	bl	8002fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d001      	beq.n	80027d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e03a      	b.n	800284e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a18      	ldr	r2, [pc, #96]	; (8002858 <HAL_TIM_Base_Start_IT+0x98>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00e      	beq.n	8002818 <HAL_TIM_Base_Start_IT+0x58>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002802:	d009      	beq.n	8002818 <HAL_TIM_Base_Start_IT+0x58>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a14      	ldr	r2, [pc, #80]	; (800285c <HAL_TIM_Base_Start_IT+0x9c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d004      	beq.n	8002818 <HAL_TIM_Base_Start_IT+0x58>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a13      	ldr	r2, [pc, #76]	; (8002860 <HAL_TIM_Base_Start_IT+0xa0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d111      	bne.n	800283c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b06      	cmp	r3, #6
 8002828:	d010      	beq.n	800284c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f042 0201 	orr.w	r2, r2, #1
 8002838:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800283a:	e007      	b.n	800284c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	40012c00 	.word	0x40012c00
 800285c:	40000400 	.word	0x40000400
 8002860:	40000800 	.word	0x40000800

08002864 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e041      	b.n	80028fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f839 	bl	8002902 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	4619      	mov	r1, r3
 80028a2:	4610      	mov	r0, r2
 80028a4:	f000 fb8e 	bl	8002fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d109      	bne.n	8002938 <HAL_TIM_PWM_Start+0x24>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b01      	cmp	r3, #1
 800292e:	bf14      	ite	ne
 8002930:	2301      	movne	r3, #1
 8002932:	2300      	moveq	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	e022      	b.n	800297e <HAL_TIM_PWM_Start+0x6a>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	2b04      	cmp	r3, #4
 800293c:	d109      	bne.n	8002952 <HAL_TIM_PWM_Start+0x3e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b01      	cmp	r3, #1
 8002948:	bf14      	ite	ne
 800294a:	2301      	movne	r3, #1
 800294c:	2300      	moveq	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	e015      	b.n	800297e <HAL_TIM_PWM_Start+0x6a>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b08      	cmp	r3, #8
 8002956:	d109      	bne.n	800296c <HAL_TIM_PWM_Start+0x58>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	bf14      	ite	ne
 8002964:	2301      	movne	r3, #1
 8002966:	2300      	moveq	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	e008      	b.n	800297e <HAL_TIM_PWM_Start+0x6a>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	bf14      	ite	ne
 8002978:	2301      	movne	r3, #1
 800297a:	2300      	moveq	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e05e      	b.n	8002a44 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d104      	bne.n	8002996 <HAL_TIM_PWM_Start+0x82>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002994:	e013      	b.n	80029be <HAL_TIM_PWM_Start+0xaa>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b04      	cmp	r3, #4
 800299a:	d104      	bne.n	80029a6 <HAL_TIM_PWM_Start+0x92>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029a4:	e00b      	b.n	80029be <HAL_TIM_PWM_Start+0xaa>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d104      	bne.n	80029b6 <HAL_TIM_PWM_Start+0xa2>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b4:	e003      	b.n	80029be <HAL_TIM_PWM_Start+0xaa>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2202      	movs	r2, #2
 80029ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2201      	movs	r2, #1
 80029c4:	6839      	ldr	r1, [r7, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fd7c 	bl	80034c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1e      	ldr	r2, [pc, #120]	; (8002a4c <HAL_TIM_PWM_Start+0x138>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d107      	bne.n	80029e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a18      	ldr	r2, [pc, #96]	; (8002a4c <HAL_TIM_PWM_Start+0x138>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00e      	beq.n	8002a0e <HAL_TIM_PWM_Start+0xfa>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f8:	d009      	beq.n	8002a0e <HAL_TIM_PWM_Start+0xfa>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a14      	ldr	r2, [pc, #80]	; (8002a50 <HAL_TIM_PWM_Start+0x13c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d004      	beq.n	8002a0e <HAL_TIM_PWM_Start+0xfa>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a12      	ldr	r2, [pc, #72]	; (8002a54 <HAL_TIM_PWM_Start+0x140>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d111      	bne.n	8002a32 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b06      	cmp	r3, #6
 8002a1e:	d010      	beq.n	8002a42 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a30:	e007      	b.n	8002a42 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0201 	orr.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40012c00 	.word	0x40012c00
 8002a50:	40000400 	.word	0x40000400
 8002a54:	40000800 	.word	0x40000800

08002a58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d122      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d11b      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0202 	mvn.w	r2, #2
 8002a84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 fa76 	bl	8002f8c <HAL_TIM_IC_CaptureCallback>
 8002aa0:	e005      	b.n	8002aae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fa69 	bl	8002f7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 fa78 	bl	8002f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d122      	bne.n	8002b08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d11b      	bne.n	8002b08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0204 	mvn.w	r2, #4
 8002ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2202      	movs	r2, #2
 8002ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fa4c 	bl	8002f8c <HAL_TIM_IC_CaptureCallback>
 8002af4:	e005      	b.n	8002b02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fa3f 	bl	8002f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fa4e 	bl	8002f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d122      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d11b      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0208 	mvn.w	r2, #8
 8002b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2204      	movs	r2, #4
 8002b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fa22 	bl	8002f8c <HAL_TIM_IC_CaptureCallback>
 8002b48:	e005      	b.n	8002b56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fa15 	bl	8002f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 fa24 	bl	8002f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b10      	cmp	r3, #16
 8002b68:	d122      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b10      	cmp	r3, #16
 8002b76:	d11b      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0210 	mvn.w	r2, #16
 8002b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2208      	movs	r2, #8
 8002b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f9f8 	bl	8002f8c <HAL_TIM_IC_CaptureCallback>
 8002b9c:	e005      	b.n	8002baa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f9eb 	bl	8002f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f9fa 	bl	8002f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d10e      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d107      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0201 	mvn.w	r2, #1
 8002bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7fe fa20 	bl	800101c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be6:	2b80      	cmp	r3, #128	; 0x80
 8002be8:	d10e      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf4:	2b80      	cmp	r3, #128	; 0x80
 8002bf6:	d107      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fce9 	bl	80035da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c12:	2b40      	cmp	r3, #64	; 0x40
 8002c14:	d10e      	bne.n	8002c34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c20:	2b40      	cmp	r3, #64	; 0x40
 8002c22:	d107      	bne.n	8002c34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f9be 	bl	8002fb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b20      	cmp	r3, #32
 8002c40:	d10e      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d107      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0220 	mvn.w	r2, #32
 8002c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fcb4 	bl	80035c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c60:	bf00      	nop
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e0ae      	b.n	8002de4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b0c      	cmp	r3, #12
 8002c92:	f200 809f 	bhi.w	8002dd4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c96:	a201      	add	r2, pc, #4	; (adr r2, 8002c9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9c:	08002cd1 	.word	0x08002cd1
 8002ca0:	08002dd5 	.word	0x08002dd5
 8002ca4:	08002dd5 	.word	0x08002dd5
 8002ca8:	08002dd5 	.word	0x08002dd5
 8002cac:	08002d11 	.word	0x08002d11
 8002cb0:	08002dd5 	.word	0x08002dd5
 8002cb4:	08002dd5 	.word	0x08002dd5
 8002cb8:	08002dd5 	.word	0x08002dd5
 8002cbc:	08002d53 	.word	0x08002d53
 8002cc0:	08002dd5 	.word	0x08002dd5
 8002cc4:	08002dd5 	.word	0x08002dd5
 8002cc8:	08002dd5 	.word	0x08002dd5
 8002ccc:	08002d93 	.word	0x08002d93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f9d6 	bl	8003088 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0208 	orr.w	r2, r2, #8
 8002cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699a      	ldr	r2, [r3, #24]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0204 	bic.w	r2, r2, #4
 8002cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6999      	ldr	r1, [r3, #24]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	619a      	str	r2, [r3, #24]
      break;
 8002d0e:	e064      	b.n	8002dda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68b9      	ldr	r1, [r7, #8]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fa1c 	bl	8003154 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6999      	ldr	r1, [r3, #24]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	021a      	lsls	r2, r3, #8
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	619a      	str	r2, [r3, #24]
      break;
 8002d50:	e043      	b.n	8002dda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fa65 	bl	8003228 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69da      	ldr	r2, [r3, #28]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0208 	orr.w	r2, r2, #8
 8002d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	69da      	ldr	r2, [r3, #28]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0204 	bic.w	r2, r2, #4
 8002d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69d9      	ldr	r1, [r3, #28]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	61da      	str	r2, [r3, #28]
      break;
 8002d90:	e023      	b.n	8002dda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 faaf 	bl	80032fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69da      	ldr	r2, [r3, #28]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69d9      	ldr	r1, [r3, #28]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	021a      	lsls	r2, r3, #8
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	61da      	str	r2, [r3, #28]
      break;
 8002dd2:	e002      	b.n	8002dda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8002dd8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_TIM_ConfigClockSource+0x1c>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e0b4      	b.n	8002f72 <HAL_TIM_ConfigClockSource+0x186>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e40:	d03e      	beq.n	8002ec0 <HAL_TIM_ConfigClockSource+0xd4>
 8002e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e46:	f200 8087 	bhi.w	8002f58 <HAL_TIM_ConfigClockSource+0x16c>
 8002e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4e:	f000 8086 	beq.w	8002f5e <HAL_TIM_ConfigClockSource+0x172>
 8002e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e56:	d87f      	bhi.n	8002f58 <HAL_TIM_ConfigClockSource+0x16c>
 8002e58:	2b70      	cmp	r3, #112	; 0x70
 8002e5a:	d01a      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0xa6>
 8002e5c:	2b70      	cmp	r3, #112	; 0x70
 8002e5e:	d87b      	bhi.n	8002f58 <HAL_TIM_ConfigClockSource+0x16c>
 8002e60:	2b60      	cmp	r3, #96	; 0x60
 8002e62:	d050      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0x11a>
 8002e64:	2b60      	cmp	r3, #96	; 0x60
 8002e66:	d877      	bhi.n	8002f58 <HAL_TIM_ConfigClockSource+0x16c>
 8002e68:	2b50      	cmp	r3, #80	; 0x50
 8002e6a:	d03c      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0xfa>
 8002e6c:	2b50      	cmp	r3, #80	; 0x50
 8002e6e:	d873      	bhi.n	8002f58 <HAL_TIM_ConfigClockSource+0x16c>
 8002e70:	2b40      	cmp	r3, #64	; 0x40
 8002e72:	d058      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x13a>
 8002e74:	2b40      	cmp	r3, #64	; 0x40
 8002e76:	d86f      	bhi.n	8002f58 <HAL_TIM_ConfigClockSource+0x16c>
 8002e78:	2b30      	cmp	r3, #48	; 0x30
 8002e7a:	d064      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x15a>
 8002e7c:	2b30      	cmp	r3, #48	; 0x30
 8002e7e:	d86b      	bhi.n	8002f58 <HAL_TIM_ConfigClockSource+0x16c>
 8002e80:	2b20      	cmp	r3, #32
 8002e82:	d060      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x15a>
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d867      	bhi.n	8002f58 <HAL_TIM_ConfigClockSource+0x16c>
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d05c      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x15a>
 8002e8c:	2b10      	cmp	r3, #16
 8002e8e:	d05a      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x15a>
 8002e90:	e062      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6899      	ldr	r1, [r3, #8]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f000 faf0 	bl	8003486 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002eb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	609a      	str	r2, [r3, #8]
      break;
 8002ebe:	e04f      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	6899      	ldr	r1, [r3, #8]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f000 fad9 	bl	8003486 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ee2:	609a      	str	r2, [r3, #8]
      break;
 8002ee4:	e03c      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	6859      	ldr	r1, [r3, #4]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f000 fa50 	bl	8003398 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2150      	movs	r1, #80	; 0x50
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 faa7 	bl	8003452 <TIM_ITRx_SetConfig>
      break;
 8002f04:	e02c      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6859      	ldr	r1, [r3, #4]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	461a      	mov	r2, r3
 8002f14:	f000 fa6e 	bl	80033f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2160      	movs	r1, #96	; 0x60
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fa97 	bl	8003452 <TIM_ITRx_SetConfig>
      break;
 8002f24:	e01c      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6859      	ldr	r1, [r3, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	461a      	mov	r2, r3
 8002f34:	f000 fa30 	bl	8003398 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2140      	movs	r1, #64	; 0x40
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fa87 	bl	8003452 <TIM_ITRx_SetConfig>
      break;
 8002f44:	e00c      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4610      	mov	r0, r2
 8002f52:	f000 fa7e 	bl	8003452 <TIM_ITRx_SetConfig>
      break;
 8002f56:	e003      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f5c:	e000      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr
	...

08002fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a29      	ldr	r2, [pc, #164]	; (800307c <TIM_Base_SetConfig+0xb8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d00b      	beq.n	8002ff4 <TIM_Base_SetConfig+0x30>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe2:	d007      	beq.n	8002ff4 <TIM_Base_SetConfig+0x30>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a26      	ldr	r2, [pc, #152]	; (8003080 <TIM_Base_SetConfig+0xbc>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d003      	beq.n	8002ff4 <TIM_Base_SetConfig+0x30>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a25      	ldr	r2, [pc, #148]	; (8003084 <TIM_Base_SetConfig+0xc0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d108      	bne.n	8003006 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	4313      	orrs	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a1c      	ldr	r2, [pc, #112]	; (800307c <TIM_Base_SetConfig+0xb8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00b      	beq.n	8003026 <TIM_Base_SetConfig+0x62>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003014:	d007      	beq.n	8003026 <TIM_Base_SetConfig+0x62>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a19      	ldr	r2, [pc, #100]	; (8003080 <TIM_Base_SetConfig+0xbc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d003      	beq.n	8003026 <TIM_Base_SetConfig+0x62>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a18      	ldr	r2, [pc, #96]	; (8003084 <TIM_Base_SetConfig+0xc0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d108      	bne.n	8003038 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800302c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4313      	orrs	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a07      	ldr	r2, [pc, #28]	; (800307c <TIM_Base_SetConfig+0xb8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d103      	bne.n	800306c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	615a      	str	r2, [r3, #20]
}
 8003072:	bf00      	nop
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr
 800307c:	40012c00 	.word	0x40012c00
 8003080:	40000400 	.word	0x40000400
 8003084:	40000800 	.word	0x40000800

08003088 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	f023 0201 	bic.w	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f023 0303 	bic.w	r3, r3, #3
 80030be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f023 0302 	bic.w	r3, r3, #2
 80030d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <TIM_OC1_SetConfig+0xc8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d10c      	bne.n	80030fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f023 0308 	bic.w	r3, r3, #8
 80030ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f023 0304 	bic.w	r3, r3, #4
 80030fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a13      	ldr	r2, [pc, #76]	; (8003150 <TIM_OC1_SetConfig+0xc8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d111      	bne.n	800312a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800310c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	621a      	str	r2, [r3, #32]
}
 8003144:	bf00      	nop
 8003146:	371c      	adds	r7, #28
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40012c00 	.word	0x40012c00

08003154 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f023 0210 	bic.w	r2, r3, #16
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800318a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	021b      	lsls	r3, r3, #8
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4313      	orrs	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f023 0320 	bic.w	r3, r3, #32
 800319e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a1d      	ldr	r2, [pc, #116]	; (8003224 <TIM_OC2_SetConfig+0xd0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d10d      	bne.n	80031d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a14      	ldr	r2, [pc, #80]	; (8003224 <TIM_OC2_SetConfig+0xd0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d113      	bne.n	8003200 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	621a      	str	r2, [r3, #32]
}
 800321a:	bf00      	nop
 800321c:	371c      	adds	r7, #28
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr
 8003224:	40012c00 	.word	0x40012c00

08003228 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0303 	bic.w	r3, r3, #3
 800325e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	021b      	lsls	r3, r3, #8
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a1d      	ldr	r2, [pc, #116]	; (80032f8 <TIM_OC3_SetConfig+0xd0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d10d      	bne.n	80032a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800328c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a14      	ldr	r2, [pc, #80]	; (80032f8 <TIM_OC3_SetConfig+0xd0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d113      	bne.n	80032d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	621a      	str	r2, [r3, #32]
}
 80032ec:	bf00      	nop
 80032ee:	371c      	adds	r7, #28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40012c00 	.word	0x40012c00

080032fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800332a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	021b      	lsls	r3, r3, #8
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4313      	orrs	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	031b      	lsls	r3, r3, #12
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a0f      	ldr	r2, [pc, #60]	; (8003394 <TIM_OC4_SetConfig+0x98>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d109      	bne.n	8003370 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003362:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	019b      	lsls	r3, r3, #6
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	621a      	str	r2, [r3, #32]
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	40012c00 	.word	0x40012c00

08003398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f023 0201 	bic.w	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f023 030a 	bic.w	r3, r3, #10
 80033d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	621a      	str	r2, [r3, #32]
}
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr

080033f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	f023 0210 	bic.w	r2, r3, #16
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800341e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	031b      	lsls	r3, r3, #12
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003430:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	4313      	orrs	r3, r2
 800343a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	621a      	str	r2, [r3, #32]
}
 8003448:	bf00      	nop
 800344a:	371c      	adds	r7, #28
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr

08003452 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003452:	b480      	push	{r7}
 8003454:	b085      	sub	sp, #20
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003468:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	f043 0307 	orr.w	r3, r3, #7
 8003474:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	609a      	str	r2, [r3, #8]
}
 800347c:	bf00      	nop
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr

08003486 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003486:	b480      	push	{r7}
 8003488:	b087      	sub	sp, #28
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	607a      	str	r2, [r7, #4]
 8003492:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	021a      	lsls	r2, r3, #8
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	431a      	orrs	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	609a      	str	r2, [r3, #8]
}
 80034ba:	bf00      	nop
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f003 031f 	and.w	r3, r3, #31
 80034d6:	2201      	movs	r2, #1
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a1a      	ldr	r2, [r3, #32]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	43db      	mvns	r3, r3
 80034e6:	401a      	ands	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a1a      	ldr	r2, [r3, #32]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	fa01 f303 	lsl.w	r3, r1, r3
 80034fc:	431a      	orrs	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	621a      	str	r2, [r3, #32]
}
 8003502:	bf00      	nop
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003520:	2302      	movs	r3, #2
 8003522:	e046      	b.n	80035b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a16      	ldr	r2, [pc, #88]	; (80035bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00e      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003570:	d009      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a12      	ldr	r2, [pc, #72]	; (80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d004      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a10      	ldr	r2, [pc, #64]	; (80035c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d10c      	bne.n	80035a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800358c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	4313      	orrs	r3, r2
 8003596:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr
 80035bc:	40012c00 	.word	0x40012c00
 80035c0:	40000400 	.word	0x40000400
 80035c4:	40000800 	.word	0x40000800

080035c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr

080035da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr

080035ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e042      	b.n	8003684 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fd ff72 	bl	80014fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2224      	movs	r2, #36	; 0x24
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800362e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fd71 	bl	8004118 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003644:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003654:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003664:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	; 0x28
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	4613      	mov	r3, r2
 800369a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d16d      	bne.n	8003788 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_UART_Transmit+0x2c>
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e066      	b.n	800378a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2221      	movs	r2, #33	; 0x21
 80036c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ca:	f7fe f869 	bl	80017a0 <HAL_GetTick>
 80036ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	88fa      	ldrh	r2, [r7, #6]
 80036d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	88fa      	ldrh	r2, [r7, #6]
 80036da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e4:	d108      	bne.n	80036f8 <HAL_UART_Transmit+0x6c>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d104      	bne.n	80036f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	e003      	b.n	8003700 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003700:	e02a      	b.n	8003758 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2200      	movs	r2, #0
 800370a:	2180      	movs	r1, #128	; 0x80
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 faf9 	bl	8003d04 <UART_WaitOnFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e036      	b.n	800378a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10b      	bne.n	800373a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003730:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	3302      	adds	r3, #2
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	e007      	b.n	800374a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	3301      	adds	r3, #1
 8003748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1cf      	bne.n	8003702 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2200      	movs	r2, #0
 800376a:	2140      	movs	r1, #64	; 0x40
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 fac9 	bl	8003d04 <UART_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e006      	b.n	800378a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	e000      	b.n	800378a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003788:	2302      	movs	r3, #2
  }
}
 800378a:	4618      	mov	r0, r3
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b0ba      	sub	sp, #232	; 0xe8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80037d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <HAL_UART_IRQHandler+0x66>
 80037e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fbd1 	bl	8003f9a <UART_Receive_IT>
      return;
 80037f8:	e25b      	b.n	8003cb2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 80de 	beq.w	80039c0 <HAL_UART_IRQHandler+0x22c>
 8003804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d106      	bne.n	800381e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003814:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 80d1 	beq.w	80039c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800381e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00b      	beq.n	8003842 <HAL_UART_IRQHandler+0xae>
 800382a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800382e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383a:	f043 0201 	orr.w	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <HAL_UART_IRQHandler+0xd2>
 800384e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d005      	beq.n	8003866 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	f043 0202 	orr.w	r2, r3, #2
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00b      	beq.n	800388a <HAL_UART_IRQHandler+0xf6>
 8003872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	f043 0204 	orr.w	r2, r3, #4
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800388a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d011      	beq.n	80038ba <HAL_UART_IRQHandler+0x126>
 8003896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d105      	bne.n	80038ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d005      	beq.n	80038ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	f043 0208 	orr.w	r2, r3, #8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 81f2 	beq.w	8003ca8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_UART_IRQHandler+0x14e>
 80038d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fb5c 	bl	8003f9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bf14      	ite	ne
 80038f0:	2301      	movne	r3, #1
 80038f2:	2300      	moveq	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d103      	bne.n	800390e <HAL_UART_IRQHandler+0x17a>
 8003906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800390a:	2b00      	cmp	r3, #0
 800390c:	d04f      	beq.n	80039ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fa66 	bl	8003de0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d041      	beq.n	80039a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3314      	adds	r3, #20
 8003928:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003930:	e853 3f00 	ldrex	r3, [r3]
 8003934:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003938:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800393c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003940:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3314      	adds	r3, #20
 800394a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800394e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003952:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800395a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800395e:	e841 2300 	strex	r3, r2, [r1]
 8003962:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003966:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1d9      	bne.n	8003922 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	2b00      	cmp	r3, #0
 8003974:	d013      	beq.n	800399e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397a:	4a7e      	ldr	r2, [pc, #504]	; (8003b74 <HAL_UART_IRQHandler+0x3e0>)
 800397c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe f85e 	bl	8001a44 <HAL_DMA_Abort_IT>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d016      	beq.n	80039bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003998:	4610      	mov	r0, r2
 800399a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800399c:	e00e      	b.n	80039bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f99c 	bl	8003cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a4:	e00a      	b.n	80039bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f998 	bl	8003cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ac:	e006      	b.n	80039bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f994 	bl	8003cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80039ba:	e175      	b.n	8003ca8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039bc:	bf00      	nop
    return;
 80039be:	e173      	b.n	8003ca8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	f040 814f 	bne.w	8003c68 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 8148 	beq.w	8003c68 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8141 	beq.w	8003c68 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039e6:	2300      	movs	r3, #0
 80039e8:	60bb      	str	r3, [r7, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80b6 	beq.w	8003b78 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 8145 	beq.w	8003cac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	f080 813e 	bcs.w	8003cac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	f000 8088 	beq.w	8003b54 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	330c      	adds	r3, #12
 8003a4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a52:	e853 3f00 	ldrex	r3, [r3]
 8003a56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	330c      	adds	r3, #12
 8003a6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a70:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a80:	e841 2300 	strex	r3, r2, [r1]
 8003a84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1d9      	bne.n	8003a44 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3314      	adds	r3, #20
 8003a96:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a9a:	e853 3f00 	ldrex	r3, [r3]
 8003a9e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003aa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003aa2:	f023 0301 	bic.w	r3, r3, #1
 8003aa6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3314      	adds	r3, #20
 8003ab0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ab4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ab8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003abc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ac0:	e841 2300 	strex	r3, r2, [r1]
 8003ac4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1e1      	bne.n	8003a90 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3314      	adds	r3, #20
 8003ad2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ad6:	e853 3f00 	ldrex	r3, [r3]
 8003ada:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3314      	adds	r3, #20
 8003aec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003af0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003af2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003af6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003af8:	e841 2300 	strex	r3, r2, [r1]
 8003afc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003afe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e3      	bne.n	8003acc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	330c      	adds	r3, #12
 8003b18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b24:	f023 0310 	bic.w	r3, r3, #16
 8003b28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	330c      	adds	r3, #12
 8003b32:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b36:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b38:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e3      	bne.n	8003b12 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fd ff3d 	bl	80019ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	4619      	mov	r1, r3
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f8bf 	bl	8003cee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b70:	e09c      	b.n	8003cac <HAL_UART_IRQHandler+0x518>
 8003b72:	bf00      	nop
 8003b74:	08003ea5 	.word	0x08003ea5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 808e 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 8089 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	330c      	adds	r3, #12
 8003ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba8:	e853 3f00 	ldrex	r3, [r3]
 8003bac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	330c      	adds	r3, #12
 8003bbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003bc2:	647a      	str	r2, [r7, #68]	; 0x44
 8003bc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bca:	e841 2300 	strex	r3, r2, [r1]
 8003bce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e3      	bne.n	8003b9e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3314      	adds	r3, #20
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	623b      	str	r3, [r7, #32]
   return(result);
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3314      	adds	r3, #20
 8003bf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003bfa:	633a      	str	r2, [r7, #48]	; 0x30
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c02:	e841 2300 	strex	r3, r2, [r1]
 8003c06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1e3      	bne.n	8003bd6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	330c      	adds	r3, #12
 8003c22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0310 	bic.w	r3, r3, #16
 8003c32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	330c      	adds	r3, #12
 8003c3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c40:	61fa      	str	r2, [r7, #28]
 8003c42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	69b9      	ldr	r1, [r7, #24]
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e3      	bne.n	8003c1c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c5e:	4619      	mov	r1, r3
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f844 	bl	8003cee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c66:	e023      	b.n	8003cb0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d009      	beq.n	8003c88 <HAL_UART_IRQHandler+0x4f4>
 8003c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f923 	bl	8003ecc <UART_Transmit_IT>
    return;
 8003c86:	e014      	b.n	8003cb2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00e      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x51e>
 8003c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f962 	bl	8003f6a <UART_EndTransmit_IT>
    return;
 8003ca6:	e004      	b.n	8003cb2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003ca8:	bf00      	nop
 8003caa:	e002      	b.n	8003cb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003cac:	bf00      	nop
 8003cae:	e000      	b.n	8003cb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003cb0:	bf00      	nop
  }
}
 8003cb2:	37e8      	adds	r7, #232	; 0xe8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr

08003cca <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr

08003cee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr

08003d04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b090      	sub	sp, #64	; 0x40
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d14:	e050      	b.n	8003db8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1c:	d04c      	beq.n	8003db8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d24:	f7fd fd3c 	bl	80017a0 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d241      	bcs.n	8003db8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	330c      	adds	r3, #12
 8003d52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d54:	637a      	str	r2, [r7, #52]	; 0x34
 8003d56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e5      	bne.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3314      	adds	r3, #20
 8003d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	613b      	str	r3, [r7, #16]
   return(result);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3314      	adds	r3, #20
 8003d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d88:	623a      	str	r2, [r7, #32]
 8003d8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	69f9      	ldr	r1, [r7, #28]
 8003d8e:	6a3a      	ldr	r2, [r7, #32]
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e5      	bne.n	8003d68 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e00f      	b.n	8003dd8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d09f      	beq.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3740      	adds	r7, #64	; 0x40
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b095      	sub	sp, #84	; 0x54
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	330c      	adds	r3, #12
 8003dee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	330c      	adds	r3, #12
 8003e06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e08:	643a      	str	r2, [r7, #64]	; 0x40
 8003e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e5      	bne.n	8003de8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3314      	adds	r3, #20
 8003e22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	e853 3f00 	ldrex	r3, [r3]
 8003e2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f023 0301 	bic.w	r3, r3, #1
 8003e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3314      	adds	r3, #20
 8003e3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e44:	e841 2300 	strex	r3, r2, [r1]
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e5      	bne.n	8003e1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d119      	bne.n	8003e8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	330c      	adds	r3, #12
 8003e5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	e853 3f00 	ldrex	r3, [r3]
 8003e66:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f023 0310 	bic.w	r3, r3, #16
 8003e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	330c      	adds	r3, #12
 8003e76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e78:	61ba      	str	r2, [r7, #24]
 8003e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	6979      	ldr	r1, [r7, #20]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	613b      	str	r3, [r7, #16]
   return(result);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e5      	bne.n	8003e58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e9a:	bf00      	nop
 8003e9c:	3754      	adds	r7, #84	; 0x54
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr

08003ea4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f7ff ff0c 	bl	8003cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ec4:	bf00      	nop
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b21      	cmp	r3, #33	; 0x21
 8003ede:	d13e      	bne.n	8003f5e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee8:	d114      	bne.n	8003f14 <UART_Transmit_IT+0x48>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d110      	bne.n	8003f14 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f06:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	1c9a      	adds	r2, r3, #2
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	621a      	str	r2, [r3, #32]
 8003f12:	e008      	b.n	8003f26 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	1c59      	adds	r1, r3, #1
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6211      	str	r1, [r2, #32]
 8003f1e:	781a      	ldrb	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	4619      	mov	r1, r3
 8003f34:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10f      	bne.n	8003f5a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	e000      	b.n	8003f60 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f5e:	2302      	movs	r3, #2
  }
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr

08003f6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff fe94 	bl	8003cb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b08c      	sub	sp, #48	; 0x30
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b22      	cmp	r3, #34	; 0x22
 8003fac:	f040 80ae 	bne.w	800410c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb8:	d117      	bne.n	8003fea <UART_Receive_IT+0x50>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d113      	bne.n	8003fea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fdc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	1c9a      	adds	r2, r3, #2
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	629a      	str	r2, [r3, #40]	; 0x28
 8003fe8:	e026      	b.n	8004038 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffc:	d007      	beq.n	800400e <UART_Receive_IT+0x74>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10a      	bne.n	800401c <UART_Receive_IT+0x82>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d106      	bne.n	800401c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	b2da      	uxtb	r2, r3
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004018:	701a      	strb	r2, [r3, #0]
 800401a:	e008      	b.n	800402e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004028:	b2da      	uxtb	r2, r3
 800402a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b29b      	uxth	r3, r3
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	4619      	mov	r1, r3
 8004046:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004048:	2b00      	cmp	r3, #0
 800404a:	d15d      	bne.n	8004108 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0220 	bic.w	r2, r2, #32
 800405a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800406a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695a      	ldr	r2, [r3, #20]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0201 	bic.w	r2, r2, #1
 800407a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	2b01      	cmp	r3, #1
 8004090:	d135      	bne.n	80040fe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	330c      	adds	r3, #12
 800409e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	613b      	str	r3, [r7, #16]
   return(result);
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f023 0310 	bic.w	r3, r3, #16
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	330c      	adds	r3, #12
 80040b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b8:	623a      	str	r2, [r7, #32]
 80040ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	69f9      	ldr	r1, [r7, #28]
 80040be:	6a3a      	ldr	r2, [r7, #32]
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e5      	bne.n	8004098 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	2b10      	cmp	r3, #16
 80040d8:	d10a      	bne.n	80040f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040f4:	4619      	mov	r1, r3
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7ff fdf9 	bl	8003cee <HAL_UARTEx_RxEventCallback>
 80040fc:	e002      	b.n	8004104 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff fde3 	bl	8003cca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	e002      	b.n	800410e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	e000      	b.n	800410e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800410c:	2302      	movs	r3, #2
  }
}
 800410e:	4618      	mov	r0, r3
 8004110:	3730      	adds	r7, #48	; 0x30
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004152:	f023 030c 	bic.w	r3, r3, #12
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6812      	ldr	r2, [r2, #0]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	430b      	orrs	r3, r1
 800415e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a2c      	ldr	r2, [pc, #176]	; (800422c <UART_SetConfig+0x114>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d103      	bne.n	8004188 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004180:	f7fe fa9c 	bl	80026bc <HAL_RCC_GetPCLK2Freq>
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	e002      	b.n	800418e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004188:	f7fe fa84 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 800418c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4613      	mov	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	009a      	lsls	r2, r3, #2
 8004198:	441a      	add	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	4a22      	ldr	r2, [pc, #136]	; (8004230 <UART_SetConfig+0x118>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	0119      	lsls	r1, r3, #4
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	009a      	lsls	r2, r3, #2
 80041b8:	441a      	add	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80041c4:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <UART_SetConfig+0x118>)
 80041c6:	fba3 0302 	umull	r0, r3, r3, r2
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	2064      	movs	r0, #100	; 0x64
 80041ce:	fb00 f303 	mul.w	r3, r0, r3
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	3332      	adds	r3, #50	; 0x32
 80041d8:	4a15      	ldr	r2, [pc, #84]	; (8004230 <UART_SetConfig+0x118>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041e4:	4419      	add	r1, r3
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	009a      	lsls	r2, r3, #2
 80041f0:	441a      	add	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041fc:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <UART_SetConfig+0x118>)
 80041fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	2064      	movs	r0, #100	; 0x64
 8004206:	fb00 f303 	mul.w	r3, r0, r3
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	3332      	adds	r3, #50	; 0x32
 8004210:	4a07      	ldr	r2, [pc, #28]	; (8004230 <UART_SetConfig+0x118>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	f003 020f 	and.w	r2, r3, #15
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	440a      	add	r2, r1
 8004222:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40013800 	.word	0x40013800
 8004230:	51eb851f 	.word	0x51eb851f

08004234 <__errno>:
 8004234:	4b01      	ldr	r3, [pc, #4]	; (800423c <__errno+0x8>)
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	2000007c 	.word	0x2000007c

08004240 <__libc_init_array>:
 8004240:	b570      	push	{r4, r5, r6, lr}
 8004242:	2600      	movs	r6, #0
 8004244:	4d0c      	ldr	r5, [pc, #48]	; (8004278 <__libc_init_array+0x38>)
 8004246:	4c0d      	ldr	r4, [pc, #52]	; (800427c <__libc_init_array+0x3c>)
 8004248:	1b64      	subs	r4, r4, r5
 800424a:	10a4      	asrs	r4, r4, #2
 800424c:	42a6      	cmp	r6, r4
 800424e:	d109      	bne.n	8004264 <__libc_init_array+0x24>
 8004250:	f000 fc6c 	bl	8004b2c <_init>
 8004254:	2600      	movs	r6, #0
 8004256:	4d0a      	ldr	r5, [pc, #40]	; (8004280 <__libc_init_array+0x40>)
 8004258:	4c0a      	ldr	r4, [pc, #40]	; (8004284 <__libc_init_array+0x44>)
 800425a:	1b64      	subs	r4, r4, r5
 800425c:	10a4      	asrs	r4, r4, #2
 800425e:	42a6      	cmp	r6, r4
 8004260:	d105      	bne.n	800426e <__libc_init_array+0x2e>
 8004262:	bd70      	pop	{r4, r5, r6, pc}
 8004264:	f855 3b04 	ldr.w	r3, [r5], #4
 8004268:	4798      	blx	r3
 800426a:	3601      	adds	r6, #1
 800426c:	e7ee      	b.n	800424c <__libc_init_array+0xc>
 800426e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004272:	4798      	blx	r3
 8004274:	3601      	adds	r6, #1
 8004276:	e7f2      	b.n	800425e <__libc_init_array+0x1e>
 8004278:	08004bc4 	.word	0x08004bc4
 800427c:	08004bc4 	.word	0x08004bc4
 8004280:	08004bc4 	.word	0x08004bc4
 8004284:	08004bc8 	.word	0x08004bc8

08004288 <malloc>:
 8004288:	4b02      	ldr	r3, [pc, #8]	; (8004294 <malloc+0xc>)
 800428a:	4601      	mov	r1, r0
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	f000 b85f 	b.w	8004350 <_malloc_r>
 8004292:	bf00      	nop
 8004294:	2000007c 	.word	0x2000007c

08004298 <free>:
 8004298:	4b02      	ldr	r3, [pc, #8]	; (80042a4 <free+0xc>)
 800429a:	4601      	mov	r1, r0
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	f000 b80b 	b.w	80042b8 <_free_r>
 80042a2:	bf00      	nop
 80042a4:	2000007c 	.word	0x2000007c

080042a8 <memset>:
 80042a8:	4603      	mov	r3, r0
 80042aa:	4402      	add	r2, r0
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d100      	bne.n	80042b2 <memset+0xa>
 80042b0:	4770      	bx	lr
 80042b2:	f803 1b01 	strb.w	r1, [r3], #1
 80042b6:	e7f9      	b.n	80042ac <memset+0x4>

080042b8 <_free_r>:
 80042b8:	b538      	push	{r3, r4, r5, lr}
 80042ba:	4605      	mov	r5, r0
 80042bc:	2900      	cmp	r1, #0
 80042be:	d043      	beq.n	8004348 <_free_r+0x90>
 80042c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042c4:	1f0c      	subs	r4, r1, #4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	bfb8      	it	lt
 80042ca:	18e4      	addlt	r4, r4, r3
 80042cc:	f000 f8ca 	bl	8004464 <__malloc_lock>
 80042d0:	4a1e      	ldr	r2, [pc, #120]	; (800434c <_free_r+0x94>)
 80042d2:	6813      	ldr	r3, [r2, #0]
 80042d4:	4610      	mov	r0, r2
 80042d6:	b933      	cbnz	r3, 80042e6 <_free_r+0x2e>
 80042d8:	6063      	str	r3, [r4, #4]
 80042da:	6014      	str	r4, [r2, #0]
 80042dc:	4628      	mov	r0, r5
 80042de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042e2:	f000 b8c5 	b.w	8004470 <__malloc_unlock>
 80042e6:	42a3      	cmp	r3, r4
 80042e8:	d90a      	bls.n	8004300 <_free_r+0x48>
 80042ea:	6821      	ldr	r1, [r4, #0]
 80042ec:	1862      	adds	r2, r4, r1
 80042ee:	4293      	cmp	r3, r2
 80042f0:	bf01      	itttt	eq
 80042f2:	681a      	ldreq	r2, [r3, #0]
 80042f4:	685b      	ldreq	r3, [r3, #4]
 80042f6:	1852      	addeq	r2, r2, r1
 80042f8:	6022      	streq	r2, [r4, #0]
 80042fa:	6063      	str	r3, [r4, #4]
 80042fc:	6004      	str	r4, [r0, #0]
 80042fe:	e7ed      	b.n	80042dc <_free_r+0x24>
 8004300:	461a      	mov	r2, r3
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	b10b      	cbz	r3, 800430a <_free_r+0x52>
 8004306:	42a3      	cmp	r3, r4
 8004308:	d9fa      	bls.n	8004300 <_free_r+0x48>
 800430a:	6811      	ldr	r1, [r2, #0]
 800430c:	1850      	adds	r0, r2, r1
 800430e:	42a0      	cmp	r0, r4
 8004310:	d10b      	bne.n	800432a <_free_r+0x72>
 8004312:	6820      	ldr	r0, [r4, #0]
 8004314:	4401      	add	r1, r0
 8004316:	1850      	adds	r0, r2, r1
 8004318:	4283      	cmp	r3, r0
 800431a:	6011      	str	r1, [r2, #0]
 800431c:	d1de      	bne.n	80042dc <_free_r+0x24>
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4401      	add	r1, r0
 8004324:	6011      	str	r1, [r2, #0]
 8004326:	6053      	str	r3, [r2, #4]
 8004328:	e7d8      	b.n	80042dc <_free_r+0x24>
 800432a:	d902      	bls.n	8004332 <_free_r+0x7a>
 800432c:	230c      	movs	r3, #12
 800432e:	602b      	str	r3, [r5, #0]
 8004330:	e7d4      	b.n	80042dc <_free_r+0x24>
 8004332:	6820      	ldr	r0, [r4, #0]
 8004334:	1821      	adds	r1, r4, r0
 8004336:	428b      	cmp	r3, r1
 8004338:	bf01      	itttt	eq
 800433a:	6819      	ldreq	r1, [r3, #0]
 800433c:	685b      	ldreq	r3, [r3, #4]
 800433e:	1809      	addeq	r1, r1, r0
 8004340:	6021      	streq	r1, [r4, #0]
 8004342:	6063      	str	r3, [r4, #4]
 8004344:	6054      	str	r4, [r2, #4]
 8004346:	e7c9      	b.n	80042dc <_free_r+0x24>
 8004348:	bd38      	pop	{r3, r4, r5, pc}
 800434a:	bf00      	nop
 800434c:	20000190 	.word	0x20000190

08004350 <_malloc_r>:
 8004350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004352:	1ccd      	adds	r5, r1, #3
 8004354:	f025 0503 	bic.w	r5, r5, #3
 8004358:	3508      	adds	r5, #8
 800435a:	2d0c      	cmp	r5, #12
 800435c:	bf38      	it	cc
 800435e:	250c      	movcc	r5, #12
 8004360:	2d00      	cmp	r5, #0
 8004362:	4606      	mov	r6, r0
 8004364:	db01      	blt.n	800436a <_malloc_r+0x1a>
 8004366:	42a9      	cmp	r1, r5
 8004368:	d903      	bls.n	8004372 <_malloc_r+0x22>
 800436a:	230c      	movs	r3, #12
 800436c:	6033      	str	r3, [r6, #0]
 800436e:	2000      	movs	r0, #0
 8004370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004372:	f000 f877 	bl	8004464 <__malloc_lock>
 8004376:	4921      	ldr	r1, [pc, #132]	; (80043fc <_malloc_r+0xac>)
 8004378:	680a      	ldr	r2, [r1, #0]
 800437a:	4614      	mov	r4, r2
 800437c:	b99c      	cbnz	r4, 80043a6 <_malloc_r+0x56>
 800437e:	4f20      	ldr	r7, [pc, #128]	; (8004400 <_malloc_r+0xb0>)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	b923      	cbnz	r3, 800438e <_malloc_r+0x3e>
 8004384:	4621      	mov	r1, r4
 8004386:	4630      	mov	r0, r6
 8004388:	f000 f83c 	bl	8004404 <_sbrk_r>
 800438c:	6038      	str	r0, [r7, #0]
 800438e:	4629      	mov	r1, r5
 8004390:	4630      	mov	r0, r6
 8004392:	f000 f837 	bl	8004404 <_sbrk_r>
 8004396:	1c43      	adds	r3, r0, #1
 8004398:	d123      	bne.n	80043e2 <_malloc_r+0x92>
 800439a:	230c      	movs	r3, #12
 800439c:	4630      	mov	r0, r6
 800439e:	6033      	str	r3, [r6, #0]
 80043a0:	f000 f866 	bl	8004470 <__malloc_unlock>
 80043a4:	e7e3      	b.n	800436e <_malloc_r+0x1e>
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	1b5b      	subs	r3, r3, r5
 80043aa:	d417      	bmi.n	80043dc <_malloc_r+0x8c>
 80043ac:	2b0b      	cmp	r3, #11
 80043ae:	d903      	bls.n	80043b8 <_malloc_r+0x68>
 80043b0:	6023      	str	r3, [r4, #0]
 80043b2:	441c      	add	r4, r3
 80043b4:	6025      	str	r5, [r4, #0]
 80043b6:	e004      	b.n	80043c2 <_malloc_r+0x72>
 80043b8:	6863      	ldr	r3, [r4, #4]
 80043ba:	42a2      	cmp	r2, r4
 80043bc:	bf0c      	ite	eq
 80043be:	600b      	streq	r3, [r1, #0]
 80043c0:	6053      	strne	r3, [r2, #4]
 80043c2:	4630      	mov	r0, r6
 80043c4:	f000 f854 	bl	8004470 <__malloc_unlock>
 80043c8:	f104 000b 	add.w	r0, r4, #11
 80043cc:	1d23      	adds	r3, r4, #4
 80043ce:	f020 0007 	bic.w	r0, r0, #7
 80043d2:	1ac2      	subs	r2, r0, r3
 80043d4:	d0cc      	beq.n	8004370 <_malloc_r+0x20>
 80043d6:	1a1b      	subs	r3, r3, r0
 80043d8:	50a3      	str	r3, [r4, r2]
 80043da:	e7c9      	b.n	8004370 <_malloc_r+0x20>
 80043dc:	4622      	mov	r2, r4
 80043de:	6864      	ldr	r4, [r4, #4]
 80043e0:	e7cc      	b.n	800437c <_malloc_r+0x2c>
 80043e2:	1cc4      	adds	r4, r0, #3
 80043e4:	f024 0403 	bic.w	r4, r4, #3
 80043e8:	42a0      	cmp	r0, r4
 80043ea:	d0e3      	beq.n	80043b4 <_malloc_r+0x64>
 80043ec:	1a21      	subs	r1, r4, r0
 80043ee:	4630      	mov	r0, r6
 80043f0:	f000 f808 	bl	8004404 <_sbrk_r>
 80043f4:	3001      	adds	r0, #1
 80043f6:	d1dd      	bne.n	80043b4 <_malloc_r+0x64>
 80043f8:	e7cf      	b.n	800439a <_malloc_r+0x4a>
 80043fa:	bf00      	nop
 80043fc:	20000190 	.word	0x20000190
 8004400:	20000194 	.word	0x20000194

08004404 <_sbrk_r>:
 8004404:	b538      	push	{r3, r4, r5, lr}
 8004406:	2300      	movs	r3, #0
 8004408:	4d05      	ldr	r5, [pc, #20]	; (8004420 <_sbrk_r+0x1c>)
 800440a:	4604      	mov	r4, r0
 800440c:	4608      	mov	r0, r1
 800440e:	602b      	str	r3, [r5, #0]
 8004410:	f7fd f90c 	bl	800162c <_sbrk>
 8004414:	1c43      	adds	r3, r0, #1
 8004416:	d102      	bne.n	800441e <_sbrk_r+0x1a>
 8004418:	682b      	ldr	r3, [r5, #0]
 800441a:	b103      	cbz	r3, 800441e <_sbrk_r+0x1a>
 800441c:	6023      	str	r3, [r4, #0]
 800441e:	bd38      	pop	{r3, r4, r5, pc}
 8004420:	200002a8 	.word	0x200002a8

08004424 <siprintf>:
 8004424:	b40e      	push	{r1, r2, r3}
 8004426:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800442a:	b500      	push	{lr}
 800442c:	b09c      	sub	sp, #112	; 0x70
 800442e:	ab1d      	add	r3, sp, #116	; 0x74
 8004430:	9002      	str	r0, [sp, #8]
 8004432:	9006      	str	r0, [sp, #24]
 8004434:	9107      	str	r1, [sp, #28]
 8004436:	9104      	str	r1, [sp, #16]
 8004438:	4808      	ldr	r0, [pc, #32]	; (800445c <siprintf+0x38>)
 800443a:	4909      	ldr	r1, [pc, #36]	; (8004460 <siprintf+0x3c>)
 800443c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004440:	9105      	str	r1, [sp, #20]
 8004442:	6800      	ldr	r0, [r0, #0]
 8004444:	a902      	add	r1, sp, #8
 8004446:	9301      	str	r3, [sp, #4]
 8004448:	f000 f874 	bl	8004534 <_svfiprintf_r>
 800444c:	2200      	movs	r2, #0
 800444e:	9b02      	ldr	r3, [sp, #8]
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	b01c      	add	sp, #112	; 0x70
 8004454:	f85d eb04 	ldr.w	lr, [sp], #4
 8004458:	b003      	add	sp, #12
 800445a:	4770      	bx	lr
 800445c:	2000007c 	.word	0x2000007c
 8004460:	ffff0208 	.word	0xffff0208

08004464 <__malloc_lock>:
 8004464:	4801      	ldr	r0, [pc, #4]	; (800446c <__malloc_lock+0x8>)
 8004466:	f000 bafb 	b.w	8004a60 <__retarget_lock_acquire_recursive>
 800446a:	bf00      	nop
 800446c:	200002b0 	.word	0x200002b0

08004470 <__malloc_unlock>:
 8004470:	4801      	ldr	r0, [pc, #4]	; (8004478 <__malloc_unlock+0x8>)
 8004472:	f000 baf6 	b.w	8004a62 <__retarget_lock_release_recursive>
 8004476:	bf00      	nop
 8004478:	200002b0 	.word	0x200002b0

0800447c <__ssputs_r>:
 800447c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004480:	688e      	ldr	r6, [r1, #8]
 8004482:	4682      	mov	sl, r0
 8004484:	429e      	cmp	r6, r3
 8004486:	460c      	mov	r4, r1
 8004488:	4690      	mov	r8, r2
 800448a:	461f      	mov	r7, r3
 800448c:	d838      	bhi.n	8004500 <__ssputs_r+0x84>
 800448e:	898a      	ldrh	r2, [r1, #12]
 8004490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004494:	d032      	beq.n	80044fc <__ssputs_r+0x80>
 8004496:	6825      	ldr	r5, [r4, #0]
 8004498:	6909      	ldr	r1, [r1, #16]
 800449a:	3301      	adds	r3, #1
 800449c:	eba5 0901 	sub.w	r9, r5, r1
 80044a0:	6965      	ldr	r5, [r4, #20]
 80044a2:	444b      	add	r3, r9
 80044a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044ac:	106d      	asrs	r5, r5, #1
 80044ae:	429d      	cmp	r5, r3
 80044b0:	bf38      	it	cc
 80044b2:	461d      	movcc	r5, r3
 80044b4:	0553      	lsls	r3, r2, #21
 80044b6:	d531      	bpl.n	800451c <__ssputs_r+0xa0>
 80044b8:	4629      	mov	r1, r5
 80044ba:	f7ff ff49 	bl	8004350 <_malloc_r>
 80044be:	4606      	mov	r6, r0
 80044c0:	b950      	cbnz	r0, 80044d8 <__ssputs_r+0x5c>
 80044c2:	230c      	movs	r3, #12
 80044c4:	f04f 30ff 	mov.w	r0, #4294967295
 80044c8:	f8ca 3000 	str.w	r3, [sl]
 80044cc:	89a3      	ldrh	r3, [r4, #12]
 80044ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d2:	81a3      	strh	r3, [r4, #12]
 80044d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d8:	464a      	mov	r2, r9
 80044da:	6921      	ldr	r1, [r4, #16]
 80044dc:	f000 fad0 	bl	8004a80 <memcpy>
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80044e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ea:	81a3      	strh	r3, [r4, #12]
 80044ec:	6126      	str	r6, [r4, #16]
 80044ee:	444e      	add	r6, r9
 80044f0:	6026      	str	r6, [r4, #0]
 80044f2:	463e      	mov	r6, r7
 80044f4:	6165      	str	r5, [r4, #20]
 80044f6:	eba5 0509 	sub.w	r5, r5, r9
 80044fa:	60a5      	str	r5, [r4, #8]
 80044fc:	42be      	cmp	r6, r7
 80044fe:	d900      	bls.n	8004502 <__ssputs_r+0x86>
 8004500:	463e      	mov	r6, r7
 8004502:	4632      	mov	r2, r6
 8004504:	4641      	mov	r1, r8
 8004506:	6820      	ldr	r0, [r4, #0]
 8004508:	f000 fac8 	bl	8004a9c <memmove>
 800450c:	68a3      	ldr	r3, [r4, #8]
 800450e:	6822      	ldr	r2, [r4, #0]
 8004510:	1b9b      	subs	r3, r3, r6
 8004512:	4432      	add	r2, r6
 8004514:	2000      	movs	r0, #0
 8004516:	60a3      	str	r3, [r4, #8]
 8004518:	6022      	str	r2, [r4, #0]
 800451a:	e7db      	b.n	80044d4 <__ssputs_r+0x58>
 800451c:	462a      	mov	r2, r5
 800451e:	f000 fad7 	bl	8004ad0 <_realloc_r>
 8004522:	4606      	mov	r6, r0
 8004524:	2800      	cmp	r0, #0
 8004526:	d1e1      	bne.n	80044ec <__ssputs_r+0x70>
 8004528:	4650      	mov	r0, sl
 800452a:	6921      	ldr	r1, [r4, #16]
 800452c:	f7ff fec4 	bl	80042b8 <_free_r>
 8004530:	e7c7      	b.n	80044c2 <__ssputs_r+0x46>
	...

08004534 <_svfiprintf_r>:
 8004534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004538:	4698      	mov	r8, r3
 800453a:	898b      	ldrh	r3, [r1, #12]
 800453c:	4607      	mov	r7, r0
 800453e:	061b      	lsls	r3, r3, #24
 8004540:	460d      	mov	r5, r1
 8004542:	4614      	mov	r4, r2
 8004544:	b09d      	sub	sp, #116	; 0x74
 8004546:	d50e      	bpl.n	8004566 <_svfiprintf_r+0x32>
 8004548:	690b      	ldr	r3, [r1, #16]
 800454a:	b963      	cbnz	r3, 8004566 <_svfiprintf_r+0x32>
 800454c:	2140      	movs	r1, #64	; 0x40
 800454e:	f7ff feff 	bl	8004350 <_malloc_r>
 8004552:	6028      	str	r0, [r5, #0]
 8004554:	6128      	str	r0, [r5, #16]
 8004556:	b920      	cbnz	r0, 8004562 <_svfiprintf_r+0x2e>
 8004558:	230c      	movs	r3, #12
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	f04f 30ff 	mov.w	r0, #4294967295
 8004560:	e0d1      	b.n	8004706 <_svfiprintf_r+0x1d2>
 8004562:	2340      	movs	r3, #64	; 0x40
 8004564:	616b      	str	r3, [r5, #20]
 8004566:	2300      	movs	r3, #0
 8004568:	9309      	str	r3, [sp, #36]	; 0x24
 800456a:	2320      	movs	r3, #32
 800456c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004570:	2330      	movs	r3, #48	; 0x30
 8004572:	f04f 0901 	mov.w	r9, #1
 8004576:	f8cd 800c 	str.w	r8, [sp, #12]
 800457a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004720 <_svfiprintf_r+0x1ec>
 800457e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004582:	4623      	mov	r3, r4
 8004584:	469a      	mov	sl, r3
 8004586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800458a:	b10a      	cbz	r2, 8004590 <_svfiprintf_r+0x5c>
 800458c:	2a25      	cmp	r2, #37	; 0x25
 800458e:	d1f9      	bne.n	8004584 <_svfiprintf_r+0x50>
 8004590:	ebba 0b04 	subs.w	fp, sl, r4
 8004594:	d00b      	beq.n	80045ae <_svfiprintf_r+0x7a>
 8004596:	465b      	mov	r3, fp
 8004598:	4622      	mov	r2, r4
 800459a:	4629      	mov	r1, r5
 800459c:	4638      	mov	r0, r7
 800459e:	f7ff ff6d 	bl	800447c <__ssputs_r>
 80045a2:	3001      	adds	r0, #1
 80045a4:	f000 80aa 	beq.w	80046fc <_svfiprintf_r+0x1c8>
 80045a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045aa:	445a      	add	r2, fp
 80045ac:	9209      	str	r2, [sp, #36]	; 0x24
 80045ae:	f89a 3000 	ldrb.w	r3, [sl]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 80a2 	beq.w	80046fc <_svfiprintf_r+0x1c8>
 80045b8:	2300      	movs	r3, #0
 80045ba:	f04f 32ff 	mov.w	r2, #4294967295
 80045be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045c2:	f10a 0a01 	add.w	sl, sl, #1
 80045c6:	9304      	str	r3, [sp, #16]
 80045c8:	9307      	str	r3, [sp, #28]
 80045ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045ce:	931a      	str	r3, [sp, #104]	; 0x68
 80045d0:	4654      	mov	r4, sl
 80045d2:	2205      	movs	r2, #5
 80045d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045d8:	4851      	ldr	r0, [pc, #324]	; (8004720 <_svfiprintf_r+0x1ec>)
 80045da:	f000 fa43 	bl	8004a64 <memchr>
 80045de:	9a04      	ldr	r2, [sp, #16]
 80045e0:	b9d8      	cbnz	r0, 800461a <_svfiprintf_r+0xe6>
 80045e2:	06d0      	lsls	r0, r2, #27
 80045e4:	bf44      	itt	mi
 80045e6:	2320      	movmi	r3, #32
 80045e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045ec:	0711      	lsls	r1, r2, #28
 80045ee:	bf44      	itt	mi
 80045f0:	232b      	movmi	r3, #43	; 0x2b
 80045f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045f6:	f89a 3000 	ldrb.w	r3, [sl]
 80045fa:	2b2a      	cmp	r3, #42	; 0x2a
 80045fc:	d015      	beq.n	800462a <_svfiprintf_r+0xf6>
 80045fe:	4654      	mov	r4, sl
 8004600:	2000      	movs	r0, #0
 8004602:	f04f 0c0a 	mov.w	ip, #10
 8004606:	9a07      	ldr	r2, [sp, #28]
 8004608:	4621      	mov	r1, r4
 800460a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800460e:	3b30      	subs	r3, #48	; 0x30
 8004610:	2b09      	cmp	r3, #9
 8004612:	d94e      	bls.n	80046b2 <_svfiprintf_r+0x17e>
 8004614:	b1b0      	cbz	r0, 8004644 <_svfiprintf_r+0x110>
 8004616:	9207      	str	r2, [sp, #28]
 8004618:	e014      	b.n	8004644 <_svfiprintf_r+0x110>
 800461a:	eba0 0308 	sub.w	r3, r0, r8
 800461e:	fa09 f303 	lsl.w	r3, r9, r3
 8004622:	4313      	orrs	r3, r2
 8004624:	46a2      	mov	sl, r4
 8004626:	9304      	str	r3, [sp, #16]
 8004628:	e7d2      	b.n	80045d0 <_svfiprintf_r+0x9c>
 800462a:	9b03      	ldr	r3, [sp, #12]
 800462c:	1d19      	adds	r1, r3, #4
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	9103      	str	r1, [sp, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	bfbb      	ittet	lt
 8004636:	425b      	neglt	r3, r3
 8004638:	f042 0202 	orrlt.w	r2, r2, #2
 800463c:	9307      	strge	r3, [sp, #28]
 800463e:	9307      	strlt	r3, [sp, #28]
 8004640:	bfb8      	it	lt
 8004642:	9204      	strlt	r2, [sp, #16]
 8004644:	7823      	ldrb	r3, [r4, #0]
 8004646:	2b2e      	cmp	r3, #46	; 0x2e
 8004648:	d10c      	bne.n	8004664 <_svfiprintf_r+0x130>
 800464a:	7863      	ldrb	r3, [r4, #1]
 800464c:	2b2a      	cmp	r3, #42	; 0x2a
 800464e:	d135      	bne.n	80046bc <_svfiprintf_r+0x188>
 8004650:	9b03      	ldr	r3, [sp, #12]
 8004652:	3402      	adds	r4, #2
 8004654:	1d1a      	adds	r2, r3, #4
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	9203      	str	r2, [sp, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	bfb8      	it	lt
 800465e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004662:	9305      	str	r3, [sp, #20]
 8004664:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004730 <_svfiprintf_r+0x1fc>
 8004668:	2203      	movs	r2, #3
 800466a:	4650      	mov	r0, sl
 800466c:	7821      	ldrb	r1, [r4, #0]
 800466e:	f000 f9f9 	bl	8004a64 <memchr>
 8004672:	b140      	cbz	r0, 8004686 <_svfiprintf_r+0x152>
 8004674:	2340      	movs	r3, #64	; 0x40
 8004676:	eba0 000a 	sub.w	r0, r0, sl
 800467a:	fa03 f000 	lsl.w	r0, r3, r0
 800467e:	9b04      	ldr	r3, [sp, #16]
 8004680:	3401      	adds	r4, #1
 8004682:	4303      	orrs	r3, r0
 8004684:	9304      	str	r3, [sp, #16]
 8004686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800468a:	2206      	movs	r2, #6
 800468c:	4825      	ldr	r0, [pc, #148]	; (8004724 <_svfiprintf_r+0x1f0>)
 800468e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004692:	f000 f9e7 	bl	8004a64 <memchr>
 8004696:	2800      	cmp	r0, #0
 8004698:	d038      	beq.n	800470c <_svfiprintf_r+0x1d8>
 800469a:	4b23      	ldr	r3, [pc, #140]	; (8004728 <_svfiprintf_r+0x1f4>)
 800469c:	bb1b      	cbnz	r3, 80046e6 <_svfiprintf_r+0x1b2>
 800469e:	9b03      	ldr	r3, [sp, #12]
 80046a0:	3307      	adds	r3, #7
 80046a2:	f023 0307 	bic.w	r3, r3, #7
 80046a6:	3308      	adds	r3, #8
 80046a8:	9303      	str	r3, [sp, #12]
 80046aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ac:	4433      	add	r3, r6
 80046ae:	9309      	str	r3, [sp, #36]	; 0x24
 80046b0:	e767      	b.n	8004582 <_svfiprintf_r+0x4e>
 80046b2:	460c      	mov	r4, r1
 80046b4:	2001      	movs	r0, #1
 80046b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80046ba:	e7a5      	b.n	8004608 <_svfiprintf_r+0xd4>
 80046bc:	2300      	movs	r3, #0
 80046be:	f04f 0c0a 	mov.w	ip, #10
 80046c2:	4619      	mov	r1, r3
 80046c4:	3401      	adds	r4, #1
 80046c6:	9305      	str	r3, [sp, #20]
 80046c8:	4620      	mov	r0, r4
 80046ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046ce:	3a30      	subs	r2, #48	; 0x30
 80046d0:	2a09      	cmp	r2, #9
 80046d2:	d903      	bls.n	80046dc <_svfiprintf_r+0x1a8>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0c5      	beq.n	8004664 <_svfiprintf_r+0x130>
 80046d8:	9105      	str	r1, [sp, #20]
 80046da:	e7c3      	b.n	8004664 <_svfiprintf_r+0x130>
 80046dc:	4604      	mov	r4, r0
 80046de:	2301      	movs	r3, #1
 80046e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80046e4:	e7f0      	b.n	80046c8 <_svfiprintf_r+0x194>
 80046e6:	ab03      	add	r3, sp, #12
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	462a      	mov	r2, r5
 80046ec:	4638      	mov	r0, r7
 80046ee:	4b0f      	ldr	r3, [pc, #60]	; (800472c <_svfiprintf_r+0x1f8>)
 80046f0:	a904      	add	r1, sp, #16
 80046f2:	f3af 8000 	nop.w
 80046f6:	1c42      	adds	r2, r0, #1
 80046f8:	4606      	mov	r6, r0
 80046fa:	d1d6      	bne.n	80046aa <_svfiprintf_r+0x176>
 80046fc:	89ab      	ldrh	r3, [r5, #12]
 80046fe:	065b      	lsls	r3, r3, #25
 8004700:	f53f af2c 	bmi.w	800455c <_svfiprintf_r+0x28>
 8004704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004706:	b01d      	add	sp, #116	; 0x74
 8004708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800470c:	ab03      	add	r3, sp, #12
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	462a      	mov	r2, r5
 8004712:	4638      	mov	r0, r7
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <_svfiprintf_r+0x1f8>)
 8004716:	a904      	add	r1, sp, #16
 8004718:	f000 f87c 	bl	8004814 <_printf_i>
 800471c:	e7eb      	b.n	80046f6 <_svfiprintf_r+0x1c2>
 800471e:	bf00      	nop
 8004720:	08004b8e 	.word	0x08004b8e
 8004724:	08004b98 	.word	0x08004b98
 8004728:	00000000 	.word	0x00000000
 800472c:	0800447d 	.word	0x0800447d
 8004730:	08004b94 	.word	0x08004b94

08004734 <_printf_common>:
 8004734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004738:	4616      	mov	r6, r2
 800473a:	4699      	mov	r9, r3
 800473c:	688a      	ldr	r2, [r1, #8]
 800473e:	690b      	ldr	r3, [r1, #16]
 8004740:	4607      	mov	r7, r0
 8004742:	4293      	cmp	r3, r2
 8004744:	bfb8      	it	lt
 8004746:	4613      	movlt	r3, r2
 8004748:	6033      	str	r3, [r6, #0]
 800474a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800474e:	460c      	mov	r4, r1
 8004750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004754:	b10a      	cbz	r2, 800475a <_printf_common+0x26>
 8004756:	3301      	adds	r3, #1
 8004758:	6033      	str	r3, [r6, #0]
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	0699      	lsls	r1, r3, #26
 800475e:	bf42      	ittt	mi
 8004760:	6833      	ldrmi	r3, [r6, #0]
 8004762:	3302      	addmi	r3, #2
 8004764:	6033      	strmi	r3, [r6, #0]
 8004766:	6825      	ldr	r5, [r4, #0]
 8004768:	f015 0506 	ands.w	r5, r5, #6
 800476c:	d106      	bne.n	800477c <_printf_common+0x48>
 800476e:	f104 0a19 	add.w	sl, r4, #25
 8004772:	68e3      	ldr	r3, [r4, #12]
 8004774:	6832      	ldr	r2, [r6, #0]
 8004776:	1a9b      	subs	r3, r3, r2
 8004778:	42ab      	cmp	r3, r5
 800477a:	dc28      	bgt.n	80047ce <_printf_common+0x9a>
 800477c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004780:	1e13      	subs	r3, r2, #0
 8004782:	6822      	ldr	r2, [r4, #0]
 8004784:	bf18      	it	ne
 8004786:	2301      	movne	r3, #1
 8004788:	0692      	lsls	r2, r2, #26
 800478a:	d42d      	bmi.n	80047e8 <_printf_common+0xb4>
 800478c:	4649      	mov	r1, r9
 800478e:	4638      	mov	r0, r7
 8004790:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004794:	47c0      	blx	r8
 8004796:	3001      	adds	r0, #1
 8004798:	d020      	beq.n	80047dc <_printf_common+0xa8>
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	68e5      	ldr	r5, [r4, #12]
 800479e:	f003 0306 	and.w	r3, r3, #6
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	bf18      	it	ne
 80047a6:	2500      	movne	r5, #0
 80047a8:	6832      	ldr	r2, [r6, #0]
 80047aa:	f04f 0600 	mov.w	r6, #0
 80047ae:	68a3      	ldr	r3, [r4, #8]
 80047b0:	bf08      	it	eq
 80047b2:	1aad      	subeq	r5, r5, r2
 80047b4:	6922      	ldr	r2, [r4, #16]
 80047b6:	bf08      	it	eq
 80047b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047bc:	4293      	cmp	r3, r2
 80047be:	bfc4      	itt	gt
 80047c0:	1a9b      	subgt	r3, r3, r2
 80047c2:	18ed      	addgt	r5, r5, r3
 80047c4:	341a      	adds	r4, #26
 80047c6:	42b5      	cmp	r5, r6
 80047c8:	d11a      	bne.n	8004800 <_printf_common+0xcc>
 80047ca:	2000      	movs	r0, #0
 80047cc:	e008      	b.n	80047e0 <_printf_common+0xac>
 80047ce:	2301      	movs	r3, #1
 80047d0:	4652      	mov	r2, sl
 80047d2:	4649      	mov	r1, r9
 80047d4:	4638      	mov	r0, r7
 80047d6:	47c0      	blx	r8
 80047d8:	3001      	adds	r0, #1
 80047da:	d103      	bne.n	80047e4 <_printf_common+0xb0>
 80047dc:	f04f 30ff 	mov.w	r0, #4294967295
 80047e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e4:	3501      	adds	r5, #1
 80047e6:	e7c4      	b.n	8004772 <_printf_common+0x3e>
 80047e8:	2030      	movs	r0, #48	; 0x30
 80047ea:	18e1      	adds	r1, r4, r3
 80047ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047f6:	4422      	add	r2, r4
 80047f8:	3302      	adds	r3, #2
 80047fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047fe:	e7c5      	b.n	800478c <_printf_common+0x58>
 8004800:	2301      	movs	r3, #1
 8004802:	4622      	mov	r2, r4
 8004804:	4649      	mov	r1, r9
 8004806:	4638      	mov	r0, r7
 8004808:	47c0      	blx	r8
 800480a:	3001      	adds	r0, #1
 800480c:	d0e6      	beq.n	80047dc <_printf_common+0xa8>
 800480e:	3601      	adds	r6, #1
 8004810:	e7d9      	b.n	80047c6 <_printf_common+0x92>
	...

08004814 <_printf_i>:
 8004814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004818:	460c      	mov	r4, r1
 800481a:	7e27      	ldrb	r7, [r4, #24]
 800481c:	4691      	mov	r9, r2
 800481e:	2f78      	cmp	r7, #120	; 0x78
 8004820:	4680      	mov	r8, r0
 8004822:	469a      	mov	sl, r3
 8004824:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004826:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800482a:	d807      	bhi.n	800483c <_printf_i+0x28>
 800482c:	2f62      	cmp	r7, #98	; 0x62
 800482e:	d80a      	bhi.n	8004846 <_printf_i+0x32>
 8004830:	2f00      	cmp	r7, #0
 8004832:	f000 80d9 	beq.w	80049e8 <_printf_i+0x1d4>
 8004836:	2f58      	cmp	r7, #88	; 0x58
 8004838:	f000 80a4 	beq.w	8004984 <_printf_i+0x170>
 800483c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004840:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004844:	e03a      	b.n	80048bc <_printf_i+0xa8>
 8004846:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800484a:	2b15      	cmp	r3, #21
 800484c:	d8f6      	bhi.n	800483c <_printf_i+0x28>
 800484e:	a001      	add	r0, pc, #4	; (adr r0, 8004854 <_printf_i+0x40>)
 8004850:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004854:	080048ad 	.word	0x080048ad
 8004858:	080048c1 	.word	0x080048c1
 800485c:	0800483d 	.word	0x0800483d
 8004860:	0800483d 	.word	0x0800483d
 8004864:	0800483d 	.word	0x0800483d
 8004868:	0800483d 	.word	0x0800483d
 800486c:	080048c1 	.word	0x080048c1
 8004870:	0800483d 	.word	0x0800483d
 8004874:	0800483d 	.word	0x0800483d
 8004878:	0800483d 	.word	0x0800483d
 800487c:	0800483d 	.word	0x0800483d
 8004880:	080049cf 	.word	0x080049cf
 8004884:	080048f1 	.word	0x080048f1
 8004888:	080049b1 	.word	0x080049b1
 800488c:	0800483d 	.word	0x0800483d
 8004890:	0800483d 	.word	0x0800483d
 8004894:	080049f1 	.word	0x080049f1
 8004898:	0800483d 	.word	0x0800483d
 800489c:	080048f1 	.word	0x080048f1
 80048a0:	0800483d 	.word	0x0800483d
 80048a4:	0800483d 	.word	0x0800483d
 80048a8:	080049b9 	.word	0x080049b9
 80048ac:	680b      	ldr	r3, [r1, #0]
 80048ae:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048b2:	1d1a      	adds	r2, r3, #4
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	600a      	str	r2, [r1, #0]
 80048b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048bc:	2301      	movs	r3, #1
 80048be:	e0a4      	b.n	8004a0a <_printf_i+0x1f6>
 80048c0:	6825      	ldr	r5, [r4, #0]
 80048c2:	6808      	ldr	r0, [r1, #0]
 80048c4:	062e      	lsls	r6, r5, #24
 80048c6:	f100 0304 	add.w	r3, r0, #4
 80048ca:	d50a      	bpl.n	80048e2 <_printf_i+0xce>
 80048cc:	6805      	ldr	r5, [r0, #0]
 80048ce:	600b      	str	r3, [r1, #0]
 80048d0:	2d00      	cmp	r5, #0
 80048d2:	da03      	bge.n	80048dc <_printf_i+0xc8>
 80048d4:	232d      	movs	r3, #45	; 0x2d
 80048d6:	426d      	negs	r5, r5
 80048d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048dc:	230a      	movs	r3, #10
 80048de:	485e      	ldr	r0, [pc, #376]	; (8004a58 <_printf_i+0x244>)
 80048e0:	e019      	b.n	8004916 <_printf_i+0x102>
 80048e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80048e6:	6805      	ldr	r5, [r0, #0]
 80048e8:	600b      	str	r3, [r1, #0]
 80048ea:	bf18      	it	ne
 80048ec:	b22d      	sxthne	r5, r5
 80048ee:	e7ef      	b.n	80048d0 <_printf_i+0xbc>
 80048f0:	680b      	ldr	r3, [r1, #0]
 80048f2:	6825      	ldr	r5, [r4, #0]
 80048f4:	1d18      	adds	r0, r3, #4
 80048f6:	6008      	str	r0, [r1, #0]
 80048f8:	0628      	lsls	r0, r5, #24
 80048fa:	d501      	bpl.n	8004900 <_printf_i+0xec>
 80048fc:	681d      	ldr	r5, [r3, #0]
 80048fe:	e002      	b.n	8004906 <_printf_i+0xf2>
 8004900:	0669      	lsls	r1, r5, #25
 8004902:	d5fb      	bpl.n	80048fc <_printf_i+0xe8>
 8004904:	881d      	ldrh	r5, [r3, #0]
 8004906:	2f6f      	cmp	r7, #111	; 0x6f
 8004908:	bf0c      	ite	eq
 800490a:	2308      	moveq	r3, #8
 800490c:	230a      	movne	r3, #10
 800490e:	4852      	ldr	r0, [pc, #328]	; (8004a58 <_printf_i+0x244>)
 8004910:	2100      	movs	r1, #0
 8004912:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004916:	6866      	ldr	r6, [r4, #4]
 8004918:	2e00      	cmp	r6, #0
 800491a:	bfa8      	it	ge
 800491c:	6821      	ldrge	r1, [r4, #0]
 800491e:	60a6      	str	r6, [r4, #8]
 8004920:	bfa4      	itt	ge
 8004922:	f021 0104 	bicge.w	r1, r1, #4
 8004926:	6021      	strge	r1, [r4, #0]
 8004928:	b90d      	cbnz	r5, 800492e <_printf_i+0x11a>
 800492a:	2e00      	cmp	r6, #0
 800492c:	d04d      	beq.n	80049ca <_printf_i+0x1b6>
 800492e:	4616      	mov	r6, r2
 8004930:	fbb5 f1f3 	udiv	r1, r5, r3
 8004934:	fb03 5711 	mls	r7, r3, r1, r5
 8004938:	5dc7      	ldrb	r7, [r0, r7]
 800493a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800493e:	462f      	mov	r7, r5
 8004940:	42bb      	cmp	r3, r7
 8004942:	460d      	mov	r5, r1
 8004944:	d9f4      	bls.n	8004930 <_printf_i+0x11c>
 8004946:	2b08      	cmp	r3, #8
 8004948:	d10b      	bne.n	8004962 <_printf_i+0x14e>
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	07df      	lsls	r7, r3, #31
 800494e:	d508      	bpl.n	8004962 <_printf_i+0x14e>
 8004950:	6923      	ldr	r3, [r4, #16]
 8004952:	6861      	ldr	r1, [r4, #4]
 8004954:	4299      	cmp	r1, r3
 8004956:	bfde      	ittt	le
 8004958:	2330      	movle	r3, #48	; 0x30
 800495a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800495e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004962:	1b92      	subs	r2, r2, r6
 8004964:	6122      	str	r2, [r4, #16]
 8004966:	464b      	mov	r3, r9
 8004968:	4621      	mov	r1, r4
 800496a:	4640      	mov	r0, r8
 800496c:	f8cd a000 	str.w	sl, [sp]
 8004970:	aa03      	add	r2, sp, #12
 8004972:	f7ff fedf 	bl	8004734 <_printf_common>
 8004976:	3001      	adds	r0, #1
 8004978:	d14c      	bne.n	8004a14 <_printf_i+0x200>
 800497a:	f04f 30ff 	mov.w	r0, #4294967295
 800497e:	b004      	add	sp, #16
 8004980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004984:	4834      	ldr	r0, [pc, #208]	; (8004a58 <_printf_i+0x244>)
 8004986:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800498a:	680e      	ldr	r6, [r1, #0]
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004992:	061f      	lsls	r7, r3, #24
 8004994:	600e      	str	r6, [r1, #0]
 8004996:	d514      	bpl.n	80049c2 <_printf_i+0x1ae>
 8004998:	07d9      	lsls	r1, r3, #31
 800499a:	bf44      	itt	mi
 800499c:	f043 0320 	orrmi.w	r3, r3, #32
 80049a0:	6023      	strmi	r3, [r4, #0]
 80049a2:	b91d      	cbnz	r5, 80049ac <_printf_i+0x198>
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	f023 0320 	bic.w	r3, r3, #32
 80049aa:	6023      	str	r3, [r4, #0]
 80049ac:	2310      	movs	r3, #16
 80049ae:	e7af      	b.n	8004910 <_printf_i+0xfc>
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	f043 0320 	orr.w	r3, r3, #32
 80049b6:	6023      	str	r3, [r4, #0]
 80049b8:	2378      	movs	r3, #120	; 0x78
 80049ba:	4828      	ldr	r0, [pc, #160]	; (8004a5c <_printf_i+0x248>)
 80049bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049c0:	e7e3      	b.n	800498a <_printf_i+0x176>
 80049c2:	065e      	lsls	r6, r3, #25
 80049c4:	bf48      	it	mi
 80049c6:	b2ad      	uxthmi	r5, r5
 80049c8:	e7e6      	b.n	8004998 <_printf_i+0x184>
 80049ca:	4616      	mov	r6, r2
 80049cc:	e7bb      	b.n	8004946 <_printf_i+0x132>
 80049ce:	680b      	ldr	r3, [r1, #0]
 80049d0:	6826      	ldr	r6, [r4, #0]
 80049d2:	1d1d      	adds	r5, r3, #4
 80049d4:	6960      	ldr	r0, [r4, #20]
 80049d6:	600d      	str	r5, [r1, #0]
 80049d8:	0635      	lsls	r5, r6, #24
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	d501      	bpl.n	80049e2 <_printf_i+0x1ce>
 80049de:	6018      	str	r0, [r3, #0]
 80049e0:	e002      	b.n	80049e8 <_printf_i+0x1d4>
 80049e2:	0671      	lsls	r1, r6, #25
 80049e4:	d5fb      	bpl.n	80049de <_printf_i+0x1ca>
 80049e6:	8018      	strh	r0, [r3, #0]
 80049e8:	2300      	movs	r3, #0
 80049ea:	4616      	mov	r6, r2
 80049ec:	6123      	str	r3, [r4, #16]
 80049ee:	e7ba      	b.n	8004966 <_printf_i+0x152>
 80049f0:	680b      	ldr	r3, [r1, #0]
 80049f2:	1d1a      	adds	r2, r3, #4
 80049f4:	600a      	str	r2, [r1, #0]
 80049f6:	681e      	ldr	r6, [r3, #0]
 80049f8:	2100      	movs	r1, #0
 80049fa:	4630      	mov	r0, r6
 80049fc:	6862      	ldr	r2, [r4, #4]
 80049fe:	f000 f831 	bl	8004a64 <memchr>
 8004a02:	b108      	cbz	r0, 8004a08 <_printf_i+0x1f4>
 8004a04:	1b80      	subs	r0, r0, r6
 8004a06:	6060      	str	r0, [r4, #4]
 8004a08:	6863      	ldr	r3, [r4, #4]
 8004a0a:	6123      	str	r3, [r4, #16]
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a12:	e7a8      	b.n	8004966 <_printf_i+0x152>
 8004a14:	4632      	mov	r2, r6
 8004a16:	4649      	mov	r1, r9
 8004a18:	4640      	mov	r0, r8
 8004a1a:	6923      	ldr	r3, [r4, #16]
 8004a1c:	47d0      	blx	sl
 8004a1e:	3001      	adds	r0, #1
 8004a20:	d0ab      	beq.n	800497a <_printf_i+0x166>
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	079b      	lsls	r3, r3, #30
 8004a26:	d413      	bmi.n	8004a50 <_printf_i+0x23c>
 8004a28:	68e0      	ldr	r0, [r4, #12]
 8004a2a:	9b03      	ldr	r3, [sp, #12]
 8004a2c:	4298      	cmp	r0, r3
 8004a2e:	bfb8      	it	lt
 8004a30:	4618      	movlt	r0, r3
 8004a32:	e7a4      	b.n	800497e <_printf_i+0x16a>
 8004a34:	2301      	movs	r3, #1
 8004a36:	4632      	mov	r2, r6
 8004a38:	4649      	mov	r1, r9
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	47d0      	blx	sl
 8004a3e:	3001      	adds	r0, #1
 8004a40:	d09b      	beq.n	800497a <_printf_i+0x166>
 8004a42:	3501      	adds	r5, #1
 8004a44:	68e3      	ldr	r3, [r4, #12]
 8004a46:	9903      	ldr	r1, [sp, #12]
 8004a48:	1a5b      	subs	r3, r3, r1
 8004a4a:	42ab      	cmp	r3, r5
 8004a4c:	dcf2      	bgt.n	8004a34 <_printf_i+0x220>
 8004a4e:	e7eb      	b.n	8004a28 <_printf_i+0x214>
 8004a50:	2500      	movs	r5, #0
 8004a52:	f104 0619 	add.w	r6, r4, #25
 8004a56:	e7f5      	b.n	8004a44 <_printf_i+0x230>
 8004a58:	08004b9f 	.word	0x08004b9f
 8004a5c:	08004bb0 	.word	0x08004bb0

08004a60 <__retarget_lock_acquire_recursive>:
 8004a60:	4770      	bx	lr

08004a62 <__retarget_lock_release_recursive>:
 8004a62:	4770      	bx	lr

08004a64 <memchr>:
 8004a64:	4603      	mov	r3, r0
 8004a66:	b510      	push	{r4, lr}
 8004a68:	b2c9      	uxtb	r1, r1
 8004a6a:	4402      	add	r2, r0
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	d101      	bne.n	8004a76 <memchr+0x12>
 8004a72:	2000      	movs	r0, #0
 8004a74:	e003      	b.n	8004a7e <memchr+0x1a>
 8004a76:	7804      	ldrb	r4, [r0, #0]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	428c      	cmp	r4, r1
 8004a7c:	d1f6      	bne.n	8004a6c <memchr+0x8>
 8004a7e:	bd10      	pop	{r4, pc}

08004a80 <memcpy>:
 8004a80:	440a      	add	r2, r1
 8004a82:	4291      	cmp	r1, r2
 8004a84:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a88:	d100      	bne.n	8004a8c <memcpy+0xc>
 8004a8a:	4770      	bx	lr
 8004a8c:	b510      	push	{r4, lr}
 8004a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a92:	4291      	cmp	r1, r2
 8004a94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a98:	d1f9      	bne.n	8004a8e <memcpy+0xe>
 8004a9a:	bd10      	pop	{r4, pc}

08004a9c <memmove>:
 8004a9c:	4288      	cmp	r0, r1
 8004a9e:	b510      	push	{r4, lr}
 8004aa0:	eb01 0402 	add.w	r4, r1, r2
 8004aa4:	d902      	bls.n	8004aac <memmove+0x10>
 8004aa6:	4284      	cmp	r4, r0
 8004aa8:	4623      	mov	r3, r4
 8004aaa:	d807      	bhi.n	8004abc <memmove+0x20>
 8004aac:	1e43      	subs	r3, r0, #1
 8004aae:	42a1      	cmp	r1, r4
 8004ab0:	d008      	beq.n	8004ac4 <memmove+0x28>
 8004ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004aba:	e7f8      	b.n	8004aae <memmove+0x12>
 8004abc:	4601      	mov	r1, r0
 8004abe:	4402      	add	r2, r0
 8004ac0:	428a      	cmp	r2, r1
 8004ac2:	d100      	bne.n	8004ac6 <memmove+0x2a>
 8004ac4:	bd10      	pop	{r4, pc}
 8004ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ace:	e7f7      	b.n	8004ac0 <memmove+0x24>

08004ad0 <_realloc_r>:
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	4607      	mov	r7, r0
 8004ad4:	4614      	mov	r4, r2
 8004ad6:	460e      	mov	r6, r1
 8004ad8:	b921      	cbnz	r1, 8004ae4 <_realloc_r+0x14>
 8004ada:	4611      	mov	r1, r2
 8004adc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ae0:	f7ff bc36 	b.w	8004350 <_malloc_r>
 8004ae4:	b922      	cbnz	r2, 8004af0 <_realloc_r+0x20>
 8004ae6:	f7ff fbe7 	bl	80042b8 <_free_r>
 8004aea:	4625      	mov	r5, r4
 8004aec:	4628      	mov	r0, r5
 8004aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004af0:	f000 f814 	bl	8004b1c <_malloc_usable_size_r>
 8004af4:	42a0      	cmp	r0, r4
 8004af6:	d20f      	bcs.n	8004b18 <_realloc_r+0x48>
 8004af8:	4621      	mov	r1, r4
 8004afa:	4638      	mov	r0, r7
 8004afc:	f7ff fc28 	bl	8004350 <_malloc_r>
 8004b00:	4605      	mov	r5, r0
 8004b02:	2800      	cmp	r0, #0
 8004b04:	d0f2      	beq.n	8004aec <_realloc_r+0x1c>
 8004b06:	4631      	mov	r1, r6
 8004b08:	4622      	mov	r2, r4
 8004b0a:	f7ff ffb9 	bl	8004a80 <memcpy>
 8004b0e:	4631      	mov	r1, r6
 8004b10:	4638      	mov	r0, r7
 8004b12:	f7ff fbd1 	bl	80042b8 <_free_r>
 8004b16:	e7e9      	b.n	8004aec <_realloc_r+0x1c>
 8004b18:	4635      	mov	r5, r6
 8004b1a:	e7e7      	b.n	8004aec <_realloc_r+0x1c>

08004b1c <_malloc_usable_size_r>:
 8004b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b20:	1f18      	subs	r0, r3, #4
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bfbc      	itt	lt
 8004b26:	580b      	ldrlt	r3, [r1, r0]
 8004b28:	18c0      	addlt	r0, r0, r3
 8004b2a:	4770      	bx	lr

08004b2c <_init>:
 8004b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2e:	bf00      	nop
 8004b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b32:	bc08      	pop	{r3}
 8004b34:	469e      	mov	lr, r3
 8004b36:	4770      	bx	lr

08004b38 <_fini>:
 8004b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3a:	bf00      	nop
 8004b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b3e:	bc08      	pop	{r3}
 8004b40:	469e      	mov	lr, r3
 8004b42:	4770      	bx	lr
